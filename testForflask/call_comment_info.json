[{"id": 11394, "name": "flaskr.blog.delete", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14554", "call_func_name": "get_post", "call_kind": "Python Call", "line": 115, "column": 4, "transfer_comment": "Get a post and its author by id.\n\n    Checks that the id exists and optionally that the current user is\n    the author.\n\n    :param id: id of post to get\n    :param check_author: require the current user to be the author\n    :return: the post with author information\n    :raise 404: if a post with the given id doesn't exist\n    :raise 403: if the current user isn't the author\n    ", "idx": 1}, {"id": 29691, "name": "flaskr.blog.update", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14554", "call_func_name": "get_post", "call_kind": "Python Call", "line": 83, "column": 11, "transfer_comment": "Get a post and its author by id.\n\n    Checks that the id exists and optionally that the current user is\n    the author.\n\n    :param id: id of post to get\n    :param check_author: require the current user to be the author\n    :return: the post with author information\n    :raise 404: if a post with the given id doesn't exist\n    :raise 403: if the current user isn't the author\n    ", "idx": 2}, {"id": 8044, "name": "conftest.app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 27, "column": 8, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 3}, {"id": 10796, "name": "flaskr.blog.create", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 67, "column": 17, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 4}, {"id": 11394, "name": "flaskr.blog.delete", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 116, "column": 9, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 5}, {"id": 14554, "name": "flaskr.blog.get_post", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 36, "column": 11, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 6}, {"id": 15649, "name": "flaskr.blog.index", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 15, "column": 9, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 7}, {"id": 15801, "name": "flaskr.db.init_db", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 35, "column": 9, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 8}, {"id": 17315, "name": "flaskr.auth.load_logged_in_user", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 34, "column": 17, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 9}, {"id": 17472, "name": "flaskr.auth.login", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 82, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 10}, {"id": 21320, "name": "flaskr.auth.register", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 49, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 11}, {"id": 28748, "name": "test_blog.test_author_required", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 31, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 12}, {"id": 28803, "name": "test_blog.test_create", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 58, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 13}, {"id": 28816, "name": "test_blog.test_delete", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 90, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 14}, {"id": 28871, "name": "test_db.test_get_close_db", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_db.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 9, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 15}, {"id": 28871, "name": "test_db.test_get_close_db", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_db.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 10, "column": 21, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 16}, {"id": 28962, "name": "test_auth.test_register", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_auth.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 18, "column": 15, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 17}, {"id": 29083, "name": "test_blog.test_update", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 69, "column": 13, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 18}, {"id": 29691, "name": "flaskr.blog.update", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py", "call_func_id": "14430", "call_func_name": "get_db", "call_kind": "Python Call", "line": 96, "column": 17, "transfer_comment": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ", "idx": 19}, {"id": 8044, "name": "conftest.app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py", "call_func_id": "15801", "call_func_name": "init_db", "call_kind": "Python Call", "line": 26, "column": 8, "transfer_comment": "Clear existing data and create new tables.", "idx": 20}, {"id": 15802, "name": "flaskr.db.init_db_command", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py", "call_func_id": "15801", "call_func_name": "init_db", "call_kind": "Python Call", "line": 45, "column": 4, "transfer_comment": "Clear existing data and create new tables.", "idx": 21}, {"id": 10802, "name": "flaskr.create_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/__init__.py", "call_func_id": "15799", "call_func_name": "init_app", "call_kind": "Python Call", "line": 35, "column": 7, "transfer_comment": "Register database functions with the Flask app. This is called by\n    the application factory.\n    ", "idx": 22}, {"id": 8044, "name": "conftest.app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py", "call_func_id": "10802", "call_func_name": "create_app", "call_kind": "Python Call", "line": 19, "column": 10, "transfer_comment": "Create and configure an instance of the Flask application.", "idx": 23}, {"id": 28788, "name": "test_factory.test_config", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_factory.py", "call_func_id": "10802", "call_func_name": "create_app", "call_kind": "Python Call", "line": 6, "column": 15, "transfer_comment": "Create and configure an instance of the Flask application.", "idx": 24}, {"id": 28788, "name": "test_factory.test_config", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_factory.py", "call_func_id": "10802", "call_func_name": "create_app", "call_kind": "Python Call", "line": 7, "column": 11, "transfer_comment": "Create and configure an instance of the Flask application.", "idx": 25}, {"id": 3704, "name": "flask.app.Flask.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "17587", "call_func_name": "make_config", "call_kind": "Python Call", "line": 395, "column": 27, "transfer_comment": "Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        ", "idx": 26}, {"id": 3704, "name": "flask.app.Flask.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "8748", "call_func_name": "auto_find_instance_path", "call_kind": "Python Call", "line": 380, "column": 33, "transfer_comment": "Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        ", "idx": 27}, {"id": 16387, "name": "flask.app.Flask.jinja_env", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "10824", "call_func_name": "create_jinja_environment", "call_kind": "Python Call", "line": 641, "column": 20, "transfer_comment": "Creates the Jinja2 environment based on :attr:`jinja_options`\n        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\n        the Jinja2 globals and filters after initialization.  Override\n        this function to customize the behavior.\n\n        .. versionadded:: 0.5\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n        ", "idx": 28}, {"id": 3704, "name": "flask.app.Flask.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "7471", "call_func_name": "add_url_rule", "call_kind": "Python Call", "line": 558, "column": 17, "transfer_comment": "Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        ", "idx": 29}, {"id": 5843, "name": "flask.app.Flask._find_error_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5992", "call_func_name": "_get_exc_class_and_code", "call_kind": "Python Call", "line": 1612, "column": 31, "transfer_comment": "Ensure that we register only exceptions as handler keys", "idx": 30}, {"id": 6711, "name": "flask.app.Flask._register_error_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5992", "call_func_name": "_get_exc_class_and_code", "call_kind": "Python Call", "line": 1345, "column": 35, "transfer_comment": "Ensure that we register only exceptions as handler keys", "idx": 31}, {"id": 21341, "name": "flask.app.Flask.register_error_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "6711", "call_func_name": "_register_error_handler", "call_kind": "Python Call", "line": 1328, "column": 13, "transfer_comment": "\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        ", "idx": 32}, {"id": 14933, "name": "flask.app.Flask.handle_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5843", "call_func_name": "_find_error_handler", "call_kind": "Python Call", "line": 1744, "column": 23, "transfer_comment": "Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        ", "idx": 33}, {"id": 14938, "name": "flask.app.Flask.handle_http_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5843", "call_func_name": "_find_error_handler", "call_kind": "Python Call", "line": 1641, "column": 23, "transfer_comment": "Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        ", "idx": 34}, {"id": 14948, "name": "flask.app.Flask.handle_user_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5843", "call_func_name": "_find_error_handler", "call_kind": "Python Call", "line": 1715, "column": 23, "transfer_comment": "Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        ", "idx": 35}, {"id": 14948, "name": "flask.app.Flask.handle_user_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14938", "call_func_name": "handle_http_exception", "call_kind": "Python Call", "line": 1713, "column": 24, "transfer_comment": "Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionadded:: 0.3\n        ", "idx": 36}, {"id": 14948, "name": "flask.app.Flask.handle_user_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "29453", "call_func_name": "trap_http_exception", "call_kind": "Python Call", "line": 1712, "column": 53, "transfer_comment": "Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        ", "idx": 37}, {"id": 14080, "name": "flask.app.Flask.full_dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14948", "call_func_name": "handle_user_exception", "call_kind": "Python Call", "line": 1814, "column": 22, "transfer_comment": "This method is called whenever an exception occurs that should be\n        handled.  A special case are\n        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by\n        this function to the :meth:`handle_http_exception` method.  This\n        function will either return a response value or reraise the\n        exception with the same traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the bad\n            key in debug mode rather than a generic bad request message.\n\n        .. versionadded:: 0.7\n        ", "idx": 38}, {"id": 30843, "name": "flask.app.Flask.wsgi_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14933", "call_func_name": "handle_exception", "call_kind": "Python Call", "line": 2294, "column": 32, "transfer_comment": "Default exception handling that kicks in when an exception\n        occurs that is not caught.  In debug mode the exception will\n        be re-raised immediately, otherwise it is logged and the handler\n        for a 500 internal server error is used.  If no such handler\n        exists, a default 500 internal server error message is displayed.\n\n        .. versionadded:: 0.3\n        ", "idx": 39}, {"id": 14933, "name": "flask.app.Flask.handle_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "17450", "call_func_name": "log_exception", "call_kind": "Python Call", "line": 1743, "column": 13, "transfer_comment": "Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        ", "idx": 40}, {"id": 11616, "name": "flask.app.Flask.dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "21055", "call_func_name": "raise_routing_exception", "call_kind": "Python Call", "line": 1790, "column": 17, "transfer_comment": "Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        ", "idx": 41}, {"id": 14080, "name": "flask.app.Flask.full_dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "11616", "call_func_name": "dispatch_request", "call_kind": "Python Call", "line": 1812, "column": 26, "transfer_comment": "Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        ", "idx": 42}, {"id": 30843, "name": "flask.app.Flask.wsgi_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14080", "call_func_name": "full_dispatch_request", "call_kind": "Python Call", "line": 2291, "column": 32, "transfer_comment": "Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        ", "idx": 43}, {"id": 14080, "name": "flask.app.Flask.full_dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "13442", "call_func_name": "finalize_request", "call_kind": "Python Call", "line": 1815, "column": 20, "transfer_comment": "Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        ", "idx": 44}, {"id": 14933, "name": "flask.app.Flask.handle_exception", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "13442", "call_func_name": "finalize_request", "call_kind": "Python Call", "line": 1747, "column": 20, "transfer_comment": "Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        ", "idx": 45}, {"id": 14080, "name": "flask.app.Flask.full_dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "29474", "call_func_name": "try_trigger_before_first_request_functions", "call_kind": "Python Call", "line": 1807, "column": 13, "transfer_comment": "Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        ", "idx": 46}, {"id": 11616, "name": "flask.app.Flask.dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "17591", "call_func_name": "make_default_options_response", "call_kind": "Python Call", "line": 1796, "column": 24, "transfer_comment": "This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        ", "idx": 47}, {"id": 30843, "name": "flask.app.Flask.wsgi_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "27519", "call_func_name": "should_ignore_error", "call_kind": "Python Call", "line": 2300, "column": 20, "transfer_comment": "This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        ", "idx": 48}, {"id": 13442, "name": "flask.app.Flask.finalize_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "17615", "call_func_name": "make_response", "call_kind": "Python Call", "line": 1830, "column": 24, "transfer_comment": "Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        ", "idx": 49}, {"id": 14080, "name": "flask.app.Flask.full_dispatch_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "20789", "call_func_name": "preprocess_request", "call_kind": "Python Call", "line": 1810, "column": 22, "transfer_comment": "Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        ", "idx": 50}, {"id": 13442, "name": "flask.app.Flask.finalize_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "20848", "call_func_name": "process_response", "call_kind": "Python Call", "line": 1832, "column": 28, "transfer_comment": "Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        ", "idx": 51}, {"id": 28966, "name": "flask.app.Flask.test_request_context", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "21646", "call_func_name": "request_context", "call_kind": "Python Call", "line": 2257, "column": 24, "transfer_comment": "Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        ", "idx": 52}, {"id": 30843, "name": "flask.app.Flask.wsgi_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "21646", "call_func_name": "request_context", "call_kind": "Python Call", "line": 2286, "column": 19, "transfer_comment": "Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        ", "idx": 53}, {"id": 2888, "name": "flask.app.Flask.__call__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "30843", "call_func_name": "wsgi_app", "call_kind": "Python Call", "line": 2308, "column": 20, "transfer_comment": "The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        ", "idx": 54}, {"id": 7473, "name": "flask.blueprints.Blueprint.add_url_rule", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21259", "call_func_name": "record", "call_kind": "Python Call", "line": 207, "column": 13, "transfer_comment": "Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        ", "idx": 55}, {"id": 21261, "name": "flask.blueprints.Blueprint.record_once", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21259", "call_func_name": "record", "call_kind": "Python Call", "line": 156, "column": 20, "transfer_comment": "Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        ", "idx": 56}, {"id": 7416, "name": "flask.blueprints.Blueprint.add_app_template_filter", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 246, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 57}, {"id": 7418, "name": "flask.blueprints.Blueprint.add_app_template_global", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 302, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 58}, {"id": 7420, "name": "flask.blueprints.Blueprint.add_app_template_test", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 274, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 59}, {"id": 7530, "name": "flask.blueprints.Blueprint.after_app_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 341, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 60}, {"id": 7537, "name": "flask.blueprints.Blueprint.after_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 333, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 61}, {"id": 8059, "name": "flask.blueprints.Blueprint.app_context_processor", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 377, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 62}, {"id": 8101, "name": "flask.blueprints.Blueprint.app_url_defaults", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 418, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 63}, {"id": 8103, "name": "flask.blueprints.Blueprint.app_url_value_preprocessor", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 411, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 64}, {"id": 8943, "name": "flask.blueprints.Blueprint.before_app_first_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 325, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 65}, {"id": 8945, "name": "flask.blueprints.Blueprint.before_app_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 317, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 66}, {"id": 8966, "name": "flask.blueprints.Blueprint.before_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 309, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 67}, {"id": 10642, "name": "flask.blueprints.Blueprint.context_processor", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 369, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 68}, {"id": 21342, "name": "flask.blueprints.Blueprint.register_error_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 447, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 69}, {"id": 28545, "name": "flask.blueprints.Blueprint.teardown_app_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 361, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 70}, {"id": 28559, "name": "flask.blueprints.Blueprint.teardown_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 352, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 71}, {"id": 29812, "name": "flask.blueprints.Blueprint.url_defaults", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 404, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 72}, {"id": 29844, "name": "flask.blueprints.Blueprint.url_value_preprocessor", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "21261", "call_func_name": "record_once", "call_kind": "Python Call", "line": 395, "column": 13, "transfer_comment": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ", "idx": 73}, {"id": 21331, "name": "flask.blueprints.Blueprint.register", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "17619", "call_func_name": "make_setup_state", "call_kind": "Python Call", "line": 178, "column": 21, "transfer_comment": "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        ", "idx": 74}, {"id": 17410, "name": "flask.cli.locate_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 255, "column": 15, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 75}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 57, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 76}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 62, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 77}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 67, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 78}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 74, "column": 22, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 79}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 75, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 80}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 82, "column": 22, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 81}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 83, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 82}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 90, "column": 22, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 83}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 91, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 84}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 98, "column": 22, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 85}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 99, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 86}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 108, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 87}, {"id": 28861, "name": "test_cli.test_find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "13457", "call_func_name": "find_best_app", "call_kind": "Python Call", "line": 117, "column": 11, "transfer_comment": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ", "idx": 88}, {"id": 13456, "name": "flask.cli.find_app_by_string", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "9375", "call_func_name": "call_factory", "call_kind": "Python Call", "line": 178, "column": 18, "transfer_comment": "Takes an app factory, a ``script_info` object and  optionally a tuple\n    of arguments. Checks for the existence of a script_info argument and calls\n    the app_factory depending on that and the arguments provided.\n    ", "idx": 89}, {"id": 13457, "name": "flask.cli.find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "9375", "call_func_name": "call_factory", "call_kind": "Python Call", "line": 76, "column": 22, "transfer_comment": "Takes an app factory, a ``script_info` object and  optionally a tuple\n    of arguments. Checks for the existence of a script_info argument and calls\n    the app_factory depending on that and the arguments provided.\n    ", "idx": 90}, {"id": 17302, "name": "flask.cli.ScriptInfo.load_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "9375", "call_func_name": "call_factory", "call_kind": "Python Call", "line": 370, "column": 18, "transfer_comment": "Takes an app factory, a ``script_info` object and  optionally a tuple\n    of arguments. Checks for the existence of a script_info argument and calls\n    the app_factory depending on that and the arguments provided.\n    ", "idx": 91}, {"id": 13456, "name": "flask.cli.find_app_by_string", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "5474", "call_func_name": "_called_with_wrong_args", "call_kind": "Python Call", "line": 180, "column": 19, "transfer_comment": "Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param factory: the factory function that was called\n    :return: true if the call failed\n    ", "idx": 92}, {"id": 13457, "name": "flask.cli.find_best_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "5474", "call_func_name": "_called_with_wrong_args", "call_kind": "Python Call", "line": 81, "column": 23, "transfer_comment": "Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param factory: the factory function that was called\n    :return: true if the call failed\n    ", "idx": 93}, {"id": 17410, "name": "flask.cli.locate_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "13456", "call_func_name": "find_app_by_string", "call_kind": "Python Call", "line": 257, "column": 15, "transfer_comment": "Checks if the given string is a variable name or a function. If it is a\n    function, it checks for specified arguments and whether it takes a\n    ``script_info`` argument and calls the function with the appropriate\n    arguments.\n    ", "idx": 94}, {"id": 17302, "name": "flask.cli.ScriptInfo.load_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "20788", "call_func_name": "prepare_import", "call_kind": "Python Call", "line": 374, "column": 30, "transfer_comment": "Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    ", "idx": 95}, {"id": 17302, "name": "flask.cli.ScriptInfo.load_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "20788", "call_func_name": "prepare_import", "call_kind": "Python Call", "line": 378, "column": 34, "transfer_comment": "Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    ", "idx": 96}, {"id": 28954, "name": "test_cli.test_prepare_import", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "20788", "call_func_name": "prepare_import", "call_kind": "Python Call", "line": 184, "column": 11, "transfer_comment": "Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    ", "idx": 97}, {"id": 11221, "name": "flask.cli.AppGroup.command.decorator", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "30707", "call_func_name": "with_appcontext", "call_kind": "Python Call", "line": 433, "column": 20, "transfer_comment": "Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.  If callbacks are registered directly\n    to the ``app.cli`` object then they are wrapped with this function\n    by default unless it's disabled.\n    ", "idx": 98}, {"id": 28822, "name": "test_cli.test_dotenv_optional", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "17308", "call_func_name": "load_dotenv", "call_kind": "Python Call", "line": 511, "column": 4, "transfer_comment": "Load \"dotenv\" files in order of precedence to set environment variables.\n\n    If an env var is already set it is not overwritten, so earlier files in the\n    list are preferred over later files.\n\n    Changes the current working directory to the location of the first file\n    found, with the assumption that it is in the top level project directory\n    and will be where the Python path should import local packages from.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location instead of searching.\n    :return: ``True`` if a file was loaded.\n\n    .. versionadded:: 1.0\n    ", "idx": 99}, {"id": 28823, "name": "test_cli.test_dotenv_path", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "17308", "call_func_name": "load_dotenv", "call_kind": "Python Call", "line": 503, "column": 4, "transfer_comment": "Load \"dotenv\" files in order of precedence to set environment variables.\n\n    If an env var is already set it is not overwritten, so earlier files in the\n    list are preferred over later files.\n\n    Changes the current working directory to the location of the first file\n    found, with the assumption that it is in the top level project directory\n    and will be where the Python path should import local packages from.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location instead of searching.\n    :return: ``True`` if a file was loaded.\n\n    .. versionadded:: 1.0\n    ", "idx": 100}, {"id": 28912, "name": "test_cli.test_load_dotenv", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py", "call_func_id": "17308", "call_func_name": "load_dotenv", "call_kind": "Python Call", "line": 485, "column": 4, "transfer_comment": "Load \"dotenv\" files in order of precedence to set environment variables.\n\n    If an env var is already set it is not overwritten, so earlier files in the\n    list are preferred over later files.\n\n    Changes the current working directory to the location of the first file\n    found, with the assumption that it is in the top level project directory\n    and will be where the Python path should import local packages from.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location instead of searching.\n    :return: ``True`` if a file was loaded.\n\n    .. versionadded:: 1.0\n    ", "idx": 101}, {"id": 22061, "name": "flask.cli.run_command", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "27523", "call_func_name": "show_server_banner", "call_kind": "Python Call", "line": 772, "column": 4, "transfer_comment": "Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    ", "idx": 102}, {"id": 13975, "name": "flask.config.Config.from_envvar", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py", "call_func_id": "13994", "call_func_name": "from_pyfile", "call_kind": "Python Call", "line": 109, "column": 20, "transfer_comment": "Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        ", "idx": 103}, {"id": 13994, "name": "flask.config.Config.from_pyfile", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py", "call_func_id": "13992", "call_func_name": "from_object", "call_kind": "Python Call", "line": 138, "column": 13, "transfer_comment": "Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        ", "idx": 104}, {"id": 13984, "name": "flask.config.Config.from_json", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py", "call_func_id": "13989", "call_func_name": "from_mapping", "call_kind": "Python Call", "line": 198, "column": 20, "transfer_comment": "Updates the config like :meth:`update` ignoring items with non-upper\n        keys.\n\n        .. versionadded:: 0.11\n        ", "idx": 105}, {"id": 8751, "name": "flask.ctx.RequestContext.auto_pop", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20589", "call_func_name": "pop", "call_kind": "Python Call", "line": 445, "column": 17, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 115}, {"id": 3208, "name": "flask.ctx.AppContext.__exit__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20590", "call_func_name": "pop", "call_kind": "Python Call", "line": 244, "column": 13, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 116}, {"id": 3100, "name": "flask.ctx.RequestContext.__enter__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20960", "call_func_name": "push", "call_kind": "Python Call", "line": 448, "column": 13, "transfer_comment": "Binds the request context to the current context.", "idx": 113}, {"id": 3101, "name": "flask.ctx.AppContext.__enter__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20961", "call_func_name": "push", "call_kind": "Python Call", "line": 240, "column": 13, "transfer_comment": "Binds the request context to the current context.", "idx": 114}, {"id": 8751, "name": "flask.ctx.RequestContext.auto_pop", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20589", "call_func_name": "pop", "call_kind": "Python Call", "line": 445, "column": 17, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 115}, {"id": 3208, "name": "flask.ctx.AppContext.__exit__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20590", "call_func_name": "pop", "call_kind": "Python Call", "line": 244, "column": 13, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 116}, {"id": 3732, "name": "flask.ctx.RequestContext.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "17711", "call_func_name": "match_request", "call_kind": "Python Call", "line": 313, "column": 17, "transfer_comment": "Can be overridden by a subclass to hook into the matching\n        of the request.\n        ", "idx": 112}, {"id": 3100, "name": "flask.ctx.RequestContext.__enter__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20960", "call_func_name": "push", "call_kind": "Python Call", "line": 448, "column": 13, "transfer_comment": "Binds the request context to the current context.", "idx": 113}, {"id": 3101, "name": "flask.ctx.AppContext.__enter__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20961", "call_func_name": "push", "call_kind": "Python Call", "line": 240, "column": 13, "transfer_comment": "Binds the request context to the current context.", "idx": 114}, {"id": 8751, "name": "flask.ctx.RequestContext.auto_pop", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20589", "call_func_name": "pop", "call_kind": "Python Call", "line": 445, "column": 17, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 115}, {"id": 3208, "name": "flask.ctx.AppContext.__exit__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py", "call_func_id": "20590", "call_func_name": "pop", "call_kind": "Python Call", "line": 244, "column": 13, "transfer_comment": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ", "idx": 116}, {"id": 6324, "name": "flask.wrappers.Request._load_form_data", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/wrappers.py", "call_func_id": "8662", "call_func_name": "attach_enctype_error_multidict", "call_kind": "Python Call", "line": 179, "column": 12, "transfer_comment": "Since Flask 0.8 we're monkeypatching the files object in case a\n    request is detected that does not use multipart form data but the files\n    object is accessed.\n    ", "idx": 117}, {"id": 6048, "name": "flask.templating.DispatchingJinjaLoader._get_source_explained", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py", "call_func_id": "12823", "call_func_name": "explain_template_loading_attempts", "call_kind": "Python Call", "line": 74, "column": 8, "transfer_comment": "This should help developers understand what failed", "idx": 118}, {"id": 14432, "name": "flask.helpers.get_debug_flag", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "14453", "call_func_name": "get_env", "call_kind": "Python Call", "line": 66, "column": 15, "transfer_comment": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ", "idx": 119}, {"id": 17587, "name": "flask.app.Flask.make_config", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14453", "call_func_name": "get_env", "call_kind": "Python Call", "line": 665, "column": 26, "transfer_comment": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ", "idx": 120}, {"id": 22044, "name": "flask.app.Flask.run", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14453", "call_func_name": "get_env", "call_kind": "Python Call", "line": 914, "column": 27, "transfer_comment": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ", "idx": 121}, {"id": 22061, "name": "flask.cli.run_command", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "14453", "call_func_name": "get_env", "call_kind": "Python Call", "line": 772, "column": 23, "transfer_comment": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ", "idx": 122}, {"id": 28873, "name": "test_helpers.TestHelpers.test_get_env", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "14453", "call_func_name": "get_env", "call_kind": "Python Call", "line": 942, "column": 15, "transfer_comment": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ", "idx": 123}, {"id": 17302, "name": "flask.cli.ScriptInfo.load_app", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 395, "column": 24, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 124}, {"id": 17587, "name": "flask.app.Flask.make_config", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 666, "column": 28, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 125}, {"id": 22044, "name": "flask.app.Flask.run", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 915, "column": 29, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 126}, {"id": 22044, "name": "flask.app.Flask.run", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 917, "column": 29, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 127}, {"id": 22061, "name": "flask.cli.run_command", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 761, "column": 12, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 128}, {"id": 28872, "name": "test_helpers.TestHelpers.test_get_debug_flag", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 928, "column": 19, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 129}, {"id": 28872, "name": "test_helpers.TestHelpers.test_get_debug_flag", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 930, "column": 19, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 130}, {"id": 28872, "name": "test_helpers.TestHelpers.test_get_debug_flag", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 931, "column": 15, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 131}, {"id": 28873, "name": "test_helpers.TestHelpers.test_get_env", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "14432", "call_func_name": "get_debug_flag", "call_kind": "Python Call", "line": 941, "column": 15, "transfer_comment": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ", "idx": 132}, {"id": 17571, "name": "flask.cli.FlaskGroup.main", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py", "call_func_id": "14506", "call_func_name": "get_load_dotenv", "call_kind": "Python Call", "line": 552, "column": 11, "transfer_comment": "Get whether the user has disabled loading dotenv files by setting\n    :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load the\n    files.\n\n    :param default: What to return if the env var isn't set.\n    ", "idx": 133}, {"id": 22044, "name": "flask.app.Flask.run", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "14506", "call_func_name": "get_load_dotenv", "call_kind": "Python Call", "line": 909, "column": 11, "transfer_comment": "Get whether the user has disabled loading dotenv files by setting\n    :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load the\n    files.\n\n    :param default: What to return if the env var isn't set.\n    ", "idx": 134}, {"id": 7471, "name": "flask.app.Flask.add_url_rule", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "5748", "call_func_name": "_endpoint_from_view_func", "call_kind": "Python Call", "line": 1180, "column": 23, "transfer_comment": "Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    ", "idx": 135}, {"id": 7472, "name": "flask.blueprints.BlueprintSetupState.add_url_rule", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py", "call_func_id": "5748", "call_func_name": "_endpoint_from_view_func", "call_kind": "Python Call", "line": 75, "column": 23, "transfer_comment": "Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    ", "idx": 136}, {"id": 11229, "name": "flask.helpers.stream_with_context.decorator", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "28162", "call_func_name": "stream_with_context", "call_kind": "Python Call", "line": 134, "column": 19, "transfer_comment": "Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot access request bound\n    information any more.\n\n    This function however can help you keep the context around for longer::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(generate())\n\n    Alternatively it can also be used around a specific generator::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    ", "idx": 137}, {"id": 29094, "name": "test_helpers.TestUrlFor.test_url_with_method", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "29817", "call_func_name": "url_for", "call_kind": "Python Call", "line": 775, "column": 21, "transfer_comment": "Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    For more information, head over to the :ref:`Quickstart <url-building>`.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type, exc_value, tb\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      defaults to `localhost`.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n      request context is available. As of Werkzeug 0.10, this also can be set\n      to an empty string to build protocol-relative URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    ", "idx": 138}, {"id": 29094, "name": "test_helpers.TestUrlFor.test_url_with_method", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "29817", "call_func_name": "url_for", "call_kind": "Python Call", "line": 776, "column": 21, "transfer_comment": "Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    For more information, head over to the :ref:`Quickstart <url-building>`.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type, exc_value, tb\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      defaults to `localhost`.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n      request context is available. As of Werkzeug 0.10, this also can be set\n      to an empty string to build protocol-relative URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    ", "idx": 139}, {"id": 29094, "name": "test_helpers.TestUrlFor.test_url_with_method", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py", "call_func_id": "29817", "call_func_name": "url_for", "call_kind": "Python Call", "line": 777, "column": 21, "transfer_comment": "Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    For more information, head over to the :ref:`Quickstart <url-building>`.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type, exc_value, tb\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      defaults to `localhost`.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n      request context is available. As of Werkzeug 0.10, this also can be set\n      to an empty string to build protocol-relative URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    ", "idx": 140}, {"id": 27155, "name": "flask.helpers.send_from_directory", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "27151", "call_func_name": "send_file", "call_kind": "Python Call", "line": 717, "column": 11, "transfer_comment": "Sends the contents of a file to the client.  This will use the\n    most efficient method available and configured.  By default it will\n    try to use the WSGI server's file_wrapper support.  Alternatively\n    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\n    to ``True`` to directly emit an ``X-Sendfile`` header.  This however\n    requires support of the underlying webserver for ``X-Sendfile``.\n\n    By default it will try to guess the mimetype for you, but you can\n    also explicitly provide one.  For extra security you probably want\n    to send certain files as attachment (HTML for instance).  The mimetype\n    guessing requires a `filename` or an `attachment_filename` to be\n    provided.\n\n    ETags will also be attached automatically if a `filename` is provided. You\n    can turn this off by setting `add_etags=False`.\n\n    If `conditional=True` and `filename` is provided, this method will try to\n    upgrade the response stream to support range requests.  This will allow\n    the request to be answered with partial content response.\n\n    Please never pass filenames to this function from user sources;\n    you should use :func:`send_from_directory` instead.\n\n    .. versionadded:: 0.2\n\n    .. versionadded:: 0.5\n       The `add_etags`, `cache_timeout` and `conditional` parameters were\n       added.  The default behavior is now to attach etags.\n\n    .. versionchanged:: 0.7\n       mimetype guessing and etag support for file objects was\n       deprecated because it was unreliable.  Pass a filename if you are\n       able to, otherwise attach an etag yourself.  This functionality\n       will be removed in Flask 1.0\n\n    .. versionchanged:: 0.9\n       cache_timeout pulls its default from application config, when None.\n\n    .. versionchanged:: 0.12\n       The filename is no longer automatically inferred from file objects. If\n       you want to use automatic mimetype and etag support, pass a filepath via\n       `filename_or_fp` or `attachment_filename`.\n\n    .. versionchanged:: 0.12\n       The `attachment_filename` is preferred over `filename` for MIME-type\n       detection.\n\n    .. versionchanged:: 1.0\n        UTF-8 filenames, as specified in `RFC 2231`_, are supported.\n\n    .. _RFC 2231: https://tools.ietf.org/html/rfc2231#section-4\n\n    .. versionchanged:: 1.0.3\n        Filenames are encoded with ASCII instead of Latin-1 for broader\n        compatibility with WSGI servers.\n\n    :param filename_or_fp: the filename of the file to send.\n                           This is relative to the :attr:`~Flask.root_path`\n                           if a relative path is specified.\n                           Alternatively a file object might be provided in\n                           which case ``X-Sendfile`` might not work and fall\n                           back to the traditional method.  Make sure that the\n                           file pointer is positioned at the start of data to\n                           send before calling :func:`send_file`.\n    :param mimetype: the mimetype of the file if provided. If a file path is\n                     given, auto detection happens as fallback, otherwise an\n                     error will be raised.\n    :param as_attachment: set to ``True`` if you want to send this file with\n                          a ``Content-Disposition: attachment`` header.\n    :param attachment_filename: the filename for the attachment if it\n                                differs from the file's filename.\n    :param add_etags: set to ``False`` to disable attaching of etags.\n    :param conditional: set to ``True`` to enable conditional responses.\n\n    :param cache_timeout: the timeout in seconds for the headers. When ``None``\n                          (default), this value is set by\n                          :meth:`~Flask.get_send_file_max_age` of\n                          :data:`~flask.current_app`.\n    :param last_modified: set the ``Last-Modified`` header to this value,\n        a :class:`~datetime.datetime` or timestamp.\n        If a file was passed, this overrides its mtime.\n    ", "idx": 141}, {"id": 27155, "name": "flask.helpers.send_from_directory", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "22423", "call_func_name": "safe_join", "call_kind": "Python Call", "line": 708, "column": 15, "transfer_comment": "Safely join `directory` and zero or more untrusted `pathnames`\n    components.\n\n    Example usage::\n\n        @app.route('/wiki/<path:filename>')\n        def wiki_page(filename):\n            filename = safe_join(app.config['WIKI_FOLDER'], filename)\n            with open(filename, 'rb') as fd:\n                content = fd.read()  # Read and process the file content...\n\n    :param directory: the trusted base directory.\n    :param pathnames: the untrusted pathnames relative to that directory.\n    :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n            paths fall out of its boundaries.\n    ", "idx": 142}, {"id": 28991, "name": "test_regression.test_safe_join_toplevel_pardir", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_regression.py", "call_func_id": "22423", "call_func_name": "safe_join", "call_kind": "Python Call", "line": 76, "column": 8, "transfer_comment": "Safely join `directory` and zero or more untrusted `pathnames`\n    components.\n\n    Example usage::\n\n        @app.route('/wiki/<path:filename>')\n        def wiki_page(filename):\n            filename = safe_join(app.config['WIKI_FOLDER'], filename)\n            with open(filename, 'rb') as fd:\n                content = fd.read()  # Read and process the file content...\n\n    :param directory: the trusted base directory.\n    :param pathnames: the untrusted pathnames relative to that directory.\n    :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n            paths fall out of its boundaries.\n    ", "idx": 143}, {"id": 27166, "name": "flask.helpers._PackageBoundObject.send_static_file", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "27155", "call_func_name": "send_from_directory", "call_kind": "Python Call", "line": 979, "column": 15, "transfer_comment": "Send a file from a given directory with :func:`send_file`.  This\n    is a secure way to quickly expose static files from an upload folder\n    or something similar.\n\n    Example usage::\n\n        @app.route('/uploads/<path:filename>')\n        def download_file(filename):\n            return send_from_directory(app.config['UPLOAD_FOLDER'],\n                                       filename, as_attachment=True)\n\n    .. admonition:: Sending files and Performance\n\n       It is strongly recommended to activate either ``X-Sendfile`` support in\n       your webserver or (if no authentication happens) to tell the webserver\n       to serve files for the given path on its own without calling into the\n       web application for improved performance.\n\n    .. versionadded:: 0.5\n\n    :param directory: the directory where all the files are stored.\n    :param filename: the filename relative to that directory to\n                     download.\n    :param options: optional keyword arguments that are directly\n                    forwarded to :func:`send_file`.\n    ", "idx": 144}, {"id": 3703, "name": "flask.helpers._PackageBoundObject.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "14579", "call_func_name": "get_root_path", "call_kind": "Python Call", "line": 888, "column": 24, "transfer_comment": "Returns the path to a package or cwd if that cannot be found.  This\n    returns the path of a package or the folder that contains a module.\n\n    Not to be confused with the package path returned by :func:`find_package`.\n    ", "idx": 145}, {"id": 13498, "name": "flask.helpers.find_package", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "6407", "call_func_name": "_matching_loader_thinks_module_is_package", "call_kind": "Python Call", "line": 822, "column": 11, "transfer_comment": "Given the loader that loaded a module and the module this function\n    attempts to figure out if the given module is actually a package.\n    ", "idx": 146}, {"id": 8748, "name": "flask.app.Flask.auto_find_instance_path", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "13498", "call_func_name": "find_package", "call_kind": "Python Call", "line": 677, "column": 31, "transfer_comment": "Finds a package and returns the prefix (or None if the package is\n    not installed) as well as the folder that contains the package or\n    module as a tuple.  The package path returned is the module that would\n    have to be added to the pythonpath in order to make it possible to\n    import the module.  The prefix is the path below which a UNIX like\n    folder structure exists (lib, share etc.).\n    ", "idx": 147}, {"id": 14590, "name": "flask.helpers._PackageBoundObject.get_send_file_max_age", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "29423", "call_func_name": "total_seconds", "call_kind": "Python Call", "line": 966, "column": 15, "transfer_comment": "Returns the total seconds from a timedelta object.\n\n    :param timedelta td: the timedelta to be converted in seconds\n\n    :returns: number of seconds\n    :rtype: int\n    ", "idx": 148}, {"id": 19439, "name": "flask.sessions.SecureCookieSessionInterface.open_session", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py", "call_func_id": "29423", "call_func_name": "total_seconds", "call_kind": "Python Call", "line": 341, "column": 18, "transfer_comment": "Returns the total seconds from a timedelta object.\n\n    :param timedelta td: the timedelta to be converted in seconds\n\n    :returns: number of seconds\n    :rtype: int\n    ", "idx": 149}, {"id": 14409, "name": "flask.sessions.SessionInterface.get_cookie_domain", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py", "call_func_id": "16023", "call_func_name": "is_ip", "call_kind": "Python Call", "line": 213, "column": 13, "transfer_comment": "Determine if the given string is an IP address.\n\n    Python 2 on Windows doesn't provide ``inet_pton``, so this only\n    checks IPv4 addresses in that environment.\n\n    :param value: value to check\n    :type value: str\n\n    :return: True if string is an IP address\n    :rtype: bool\n    ", "idx": 150}, {"id": 27166, "name": "flask.helpers._PackageBoundObject.send_static_file", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py", "call_func_id": "14590", "call_func_name": "get_send_file_max_age", "call_kind": "Python Call", "line": 978, "column": 29, "transfer_comment": "Provides default cache_timeout for the :func:`send_file` functions.\n\n        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\n        the configuration of :data:`~flask.current_app`.\n\n        Static file functions such as :func:`send_from_directory` use this\n        function, and :func:`send_file` calls this function on\n        :data:`~flask.current_app` when the given cache_timeout is ``None``. If a\n        cache_timeout is given in :func:`send_file`, that timeout is used;\n        otherwise, this method is called.\n\n        This allows subclasses to change the behavior when sending files based\n        on the filename.  For example, to set the cache timeout for .js files\n        to 60 seconds::\n\n            class MyFlask(flask.Flask):\n                def get_send_file_max_age(self, name):\n                    if name.lower().endswith('.js'):\n                        return 60\n                    return flask.Flask.get_send_file_max_age(self, name)\n\n        .. versionadded:: 0.9\n        ", "idx": 151}, {"id": 28457, "name": "flask.json.tag.JSONTag.tag", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "29340", "call_func_name": "to_json", "call_kind": "Python Call", "line": 86, "column": 31, "transfer_comment": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.", "idx": 152}, {"id": 11898, "name": "flask.json.tag.TaggedJSONSerializer.dumps", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "28454", "call_func_name": "tag", "call_kind": "Python Call", "line": 296, "column": 26, "transfer_comment": "Convert a value to a tagged representation if necessary.", "idx": 155}, {"id": 4030, "name": "flask.json.tag.TaggedJSONSerializer.__init__", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "21330", "call_func_name": "register", "call_kind": "Python Call", "line": 244, "column": 17, "transfer_comment": "Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        ", "idx": 154}, {"id": 11898, "name": "flask.json.tag.TaggedJSONSerializer.dumps", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "28454", "call_func_name": "tag", "call_kind": "Python Call", "line": 296, "column": 26, "transfer_comment": "Convert a value to a tagged representation if necessary.", "idx": 155}, {"id": 11898, "name": "flask.json.tag.TaggedJSONSerializer.dumps", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "11898", "call_func_name": "dumps", "call_kind": "Python Call", "line": 296, "column": 15, "transfer_comment": "Tag the value and dump it to a compact JSON string.", "idx": 156}, {"id": 17365, "name": "flask.json.tag.TaggedJSONSerializer.loads", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py", "call_func_id": "17365", "call_func_name": "loads", "call_kind": "Python Call", "line": 300, "column": 15, "transfer_comment": "Load data from a JSON string and deserialized any tagged objects.", "idx": 157}, {"id": 11878, "name": "flask.json.dump", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "5726", "call_func_name": "_dump_arg_defaults", "call_kind": "Python Call", "line": 187, "column": 4, "transfer_comment": "Inject default arguments for dump functions.", "idx": 158}, {"id": 11894, "name": "flask.json.dumps", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "5726", "call_func_name": "_dump_arg_defaults", "call_kind": "Python Call", "line": 177, "column": 4, "transfer_comment": "Inject default arguments for dump functions.", "idx": 159}, {"id": 17289, "name": "flask.json.load", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "6320", "call_func_name": "_load_arg_defaults", "call_kind": "Python Call", "line": 211, "column": 4, "transfer_comment": "Inject default arguments for load functions.", "idx": 160}, {"id": 17361, "name": "flask.json.loads", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "6320", "call_func_name": "_load_arg_defaults", "call_kind": "Python Call", "line": 199, "column": 4, "transfer_comment": "Inject default arguments for load functions.", "idx": 161}, {"id": 17361, "name": "flask.json.loads", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "11496", "call_func_name": "detect_encoding", "call_kind": "Python Call", "line": 203, "column": 23, "transfer_comment": "Detect which UTF codec was used to encode the given bytes.\n\n    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n    or little endian. Some editors or libraries may prepend a BOM.\n\n    :param data: Bytes in unknown UTF encoding.\n    :return: UTF encoding name\n    ", "idx": 162}, {"id": 15328, "name": "flask.json.htmlsafe_dumps", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "11894", "call_func_name": "dumps", "call_kind": "Python Call", "line": 242, "column": 9, "transfer_comment": "Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n    configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n    application on the stack.\n\n    This function can return ``unicode`` strings or ascii-only bytestrings by\n    default which coerce into unicode strings automatically.  That behavior by\n    default is controlled by the ``JSON_AS_ASCII`` configuration variable\n    and can be overridden by the simplejson ``ensure_ascii`` parameter.\n    ", "idx": 163}, {"id": 16423, "name": "flask.json.jsonify", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "11894", "call_func_name": "dumps", "call_kind": "Python Call", "line": 321, "column": 8, "transfer_comment": "Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n    configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n    application on the stack.\n\n    This function can return ``unicode`` strings or ascii-only bytestrings by\n    default which coerce into unicode strings automatically.  That behavior by\n    default is controlled by the ``JSON_AS_ASCII`` configuration variable\n    and can be overridden by the simplejson ``ensure_ascii`` parameter.\n    ", "idx": 164}, {"id": 13984, "name": "flask.config.Config.from_json", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py", "call_func_id": "17361", "call_func_name": "loads", "call_kind": "Python Call", "line": 192, "column": 27, "transfer_comment": "Unserialize a JSON object from a string ``s`` by using the application's\n    configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an\n    application on the stack.\n    ", "idx": 165}, {"id": 15327, "name": "flask.json.htmlsafe_dump", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "15328", "call_func_name": "htmlsafe_dumps", "call_kind": "Python Call", "line": 254, "column": 23, "transfer_comment": "Works exactly like :func:`dumps` but is safe for use in ``<script>``\n    tags.  It accepts the same arguments and returns a JSON string.  Note that\n    this is available in templates through the ``|tojson`` filter which will\n    also mark the result as safe.  Due to how this function escapes certain\n    characters this is safe even if used outside of ``<script>`` tags.\n\n    The following characters are escaped in strings:\n\n    -   ``<``\n    -   ``>``\n    -   ``&``\n    -   ``'``\n\n    This makes it safe to embed such strings in any place in HTML with the\n    notable exception of double quoted attributes.  In that case single\n    quote your attributes or HTML escape it in addition.\n\n    .. versionchanged:: 0.10\n       This function's return value is now always safe for HTML usage, even\n       if outside of script tags or if used in XHTML.  This rule does not\n       hold true when using this function in HTML attributes that are double\n       quoted.  Always single quote attributes if you use the ``|tojson``\n       filter.  Alternatively use ``|tojson|forceescape``.\n    ", "idx": 166}, {"id": 29378, "name": "flask.json.tojson_filter", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py", "call_func_id": "15328", "call_func_name": "htmlsafe_dumps", "call_kind": "Python Call", "line": 327, "column": 18, "transfer_comment": "Works exactly like :func:`dumps` but is safe for use in ``<script>``\n    tags.  It accepts the same arguments and returns a JSON string.  Note that\n    this is available in templates through the ``|tojson`` filter which will\n    also mark the result as safe.  Due to how this function escapes certain\n    characters this is safe even if used outside of ``<script>`` tags.\n\n    The following characters are escaped in strings:\n\n    -   ``<``\n    -   ``>``\n    -   ``&``\n    -   ``'``\n\n    This makes it safe to embed such strings in any place in HTML with the\n    notable exception of double quoted attributes.  In that case single\n    quote your attributes or HTML escape it in addition.\n\n    .. versionchanged:: 0.10\n       This function's return value is now always safe for HTML usage, even\n       if outside of script tags or if used in XHTML.  This rule does not\n       hold true when using this function in HTML attributes that are double\n       quoted.  Always single quote attributes if you use the ``|tojson``\n       filter.  Alternatively use ``|tojson|forceescape``.\n    ", "idx": 167}, {"id": 11991, "name": "test_testing.test_json_request_and_response.echo", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_testing.py", "call_func_id": "16423", "call_func_name": "jsonify", "call_kind": "Python Call", "line": 293, "column": 15, "transfer_comment": "This function wraps :func:`dumps` to add a few enhancements that make\n    life easier.  It turns the JSON output into a :class:`~flask.Response`\n    object with the :mimetype:`application/json` mimetype.  For convenience, it\n    also converts multiple arguments into an array or multiple keyword arguments\n    into a dict.  This means that both ``jsonify(1,2,3)`` and\n    ``jsonify([1,2,3])`` serialize to ``[1,2,3]``.\n\n    For clarity, the JSON serialization behavior has the following differences\n    from :func:`dumps`:\n\n    1. Single argument: Passed straight through to :func:`dumps`.\n    2. Multiple arguments: Converted to an array before being passed to\n       :func:`dumps`.\n    3. Multiple keyword arguments: Converted to a dict before being passed to\n       :func:`dumps`.\n    4. Both args and kwargs: Behavior undefined and will throw an exception.\n\n    Example usage::\n\n        from flask import jsonify\n\n        @app.route('/_get_current_user')\n        def get_current_user():\n            return jsonify(username=g.user.username,\n                           email=g.user.email,\n                           id=g.user.id)\n\n    This will send a JSON response like this to the browser::\n\n        {\n            \"username\": \"admin\",\n            \"email\": \"admin@localhost\",\n            \"id\": 42\n        }\n\n\n    .. versionchanged:: 0.11\n       Added support for serializing top-level arrays. This introduces a\n       security risk in ancient browsers. See :ref:`json-security` for details.\n\n    This function's response will be pretty printed if the\n    ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the\n    Flask app is running in debug mode. Compressed (not pretty) formatting\n    currently means no indents and no spaces after separators.\n\n    .. versionadded:: 0.2\n    ", "idx": 168}, {"id": 10825, "name": "flask.logging.create_logger", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/logging.py", "call_func_id": "14991", "call_func_name": "has_level_handler", "call_kind": "Python Call", "line": 75, "column": 11, "transfer_comment": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ", "idx": 169}, {"id": 28879, "name": "test_logging.test_has_level_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_logging.py", "call_func_id": "14991", "call_func_name": "has_level_handler", "call_kind": "Python Call", "line": 81, "column": 15, "transfer_comment": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ", "idx": 170}, {"id": 28879, "name": "test_logging.test_has_level_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_logging.py", "call_func_id": "14991", "call_func_name": "has_level_handler", "call_kind": "Python Call", "line": 85, "column": 11, "transfer_comment": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ", "idx": 171}, {"id": 28879, "name": "test_logging.test_has_level_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_logging.py", "call_func_id": "14991", "call_func_name": "has_level_handler", "call_kind": "Python Call", "line": 88, "column": 15, "transfer_comment": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ", "idx": 172}, {"id": 28879, "name": "test_logging.test_has_level_handler", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_logging.py", "call_func_id": "14991", "call_func_name": "has_level_handler", "call_kind": "Python Call", "line": 92, "column": 15, "transfer_comment": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ", "idx": 173}, {"id": 17468, "name": "flask.app.Flask.logger", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "10825", "call_func_name": "create_logger", "call_kind": "Python Call", "line": 636, "column": 15, "transfer_comment": "Get the ``'flask.app'`` logger and configure it if needed.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    ", "idx": 174}, {"id": 14409, "name": "flask.sessions.SessionInterface.get_cookie_domain", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py", "call_func_id": "14413", "call_func_name": "get_cookie_path", "call_kind": "Python Call", "line": 225, "column": 16, "transfer_comment": "Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        ", "idx": 175}, {"id": 21436, "name": "flask.templating.render_template", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py", "call_func_id": "6735", "call_func_name": "_render", "call_kind": "Python Call", "line": 134, "column": 11, "transfer_comment": "Renders the template and fires the signal", "idx": 176}, {"id": 21438, "name": "flask.templating.render_template_string", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py", "call_func_id": "6735", "call_func_name": "_render", "call_kind": "Python Call", "line": 149, "column": 11, "transfer_comment": "Renders the template and fires the signal", "idx": 177}, {"id": 19423, "name": "flask.testing.FlaskClient.open", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/testing.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 187, "column": 22, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 178}, {"id": 28749, "name": "test_reqctx.test_bad_environ_raises_bad_request", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_reqctx.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 242, "column": 14, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 179}, {"id": 28786, "name": "test_testing.test_client_open_environ", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_testing.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 85, "column": 14, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 180}, {"id": 28840, "name": "test_reqctx.test_environ_for_valid_idna_completes", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_reqctx.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 265, "column": 14, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 181}, {"id": 28950, "name": "test_testing.test_path_is_url", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_testing.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 110, "column": 9, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 182}, {"id": 28966, "name": "flask.app.Flask.test_request_context", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py", "call_func_id": "17625", "call_func_name": "make_test_environ_builder", "call_kind": "Python Call", "line": 2254, "column": 18, "transfer_comment": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ", "idx": 183}, {"id": 16411, "name": "flask.wrappers.JSONMixin.json-getter", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/wrappers.py", "call_func_id": "14500", "call_func_name": "get_json", "call_kind": "Python Call", "line": 47, "column": 20, "transfer_comment": "Parse and return the data as JSON. If the mimetype does not\n        indicate JSON (:mimetype:`application/json`, see\n        :meth:`is_json`), this returns ``None`` unless ``force`` is\n        true. If parsing fails, :meth:`on_json_loading_failed` is called\n        and its return value is used as the return value.\n\n        :param force: Ignore the mimetype and always try to parse JSON.\n        :param silent: Silence parsing errors and return ``None``\n            instead.\n        :param cache: Store the parsed JSON to return for subsequent\n            calls.\n        ", "idx": 184}, {"id": 14500, "name": "flask.wrappers.JSONMixin.get_json", "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/wrappers.py", "call_func_id": "19365", "call_func_name": "on_json_loading_failed", "call_kind": "Python Call", "line": 82, "column": 26, "transfer_comment": "Called if :meth:`get_json` parsing fails and isn't silenced. If\n        this method returns a value, it is used as the return value for\n        :meth:`get_json`. The default implementation raises a\n        :class:`BadRequest` exception.\n\n        .. versionchanged:: 0.10\n           Raise a :exc:`BadRequest` error instead of returning an error\n           message as JSON. If you want that behavior you can add it by\n           subclassing.\n\n        .. versionadded:: 0.8\n        ", "idx": 185}]