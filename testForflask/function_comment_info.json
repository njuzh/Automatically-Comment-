[
    {
        "id": 17475,
        "kind": "python Function",
        "name": "flaskr.auth.login_required",
        "parameters": "view wrapped_view",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py",
        "start_line": 13,
        "end_line": 22,
        "comments": "View decorator that redirects anonymous users to the login page.",
        "idx": 1
    },
    {
        "id": 17315,
        "kind": "python Function",
        "name": "flaskr.auth.load_logged_in_user",
        "parameters": "user_id",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py",
        "start_line": 26,
        "end_line": 36,
        "comments": "If a user id is stored in the session, load the user object from\n    the database into ``g.user``.",
        "idx": 2
    },
    {
        "id": 21320,
        "kind": "python Function",
        "name": "flaskr.auth.register",
        "parameters": "username password db error",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py",
        "start_line": 40,
        "end_line": 73,
        "comments": "Register a new user.\n\n    Validates that the username is not already taken. Hashes the\n    password for security.\n    ",
        "idx": 3
    },
    {
        "id": 17472,
        "kind": "python Function",
        "name": "flaskr.auth.login",
        "parameters": "username password db error user",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py",
        "start_line": 77,
        "end_line": 101,
        "comments": "Log in a registered user by adding the user id to the session.",
        "idx": 4
    },
    {
        "id": 17479,
        "kind": "python Function",
        "name": "flaskr.auth.logout",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/auth.py",
        "start_line": 105,
        "end_line": 108,
        "comments": "Clear the current session, including the stored user id.",
        "idx": 5
    },
    {
        "id": 15649,
        "kind": "python Function",
        "name": "flaskr.blog.index",
        "parameters": "db posts",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py",
        "start_line": 13,
        "end_line": 21,
        "comments": "Show all the posts, most recent first.",
        "idx": 6
    },
    {
        "id": 14554,
        "kind": "python Function",
        "name": "flaskr.blog.get_post",
        "parameters": "id check_author post",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py",
        "start_line": 24,
        "end_line": 49,
        "comments": "Get a post and its author by id.\n\n    Checks that the id exists and optionally that the current user is\n    the author.\n\n    :param id: id of post to get\n    :param check_author: require the current user to be the author\n    :return: the post with author information\n    :raise 404: if a post with the given id doesn't exist\n    :raise 403: if the current user isn't the author\n    ",
        "idx": 7
    },
    {
        "id": 10796,
        "kind": "python Function",
        "name": "flaskr.blog.create",
        "parameters": "title body error db",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py",
        "start_line": 54,
        "end_line": 76,
        "comments": "Create a new post for the current user.",
        "idx": 8
    },
    {
        "id": 29691,
        "kind": "python Function",
        "name": "flaskr.blog.update",
        "parameters": "id post title body error db",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py",
        "start_line": 81,
        "end_line": 104,
        "comments": "Update a post if the current user is the author.",
        "idx": 9
    },
    {
        "id": 11394,
        "kind": "python Function",
        "name": "flaskr.blog.delete",
        "parameters": "id db",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/blog.py",
        "start_line": 109,
        "end_line": 119,
        "comments": "Delete a post.\n\n    Ensures that the post exists and that the logged in user is the\n    author of the post.\n    ",
        "idx": 10
    },
    {
        "id": 14430,
        "kind": "python Function",
        "name": "flaskr.db.get_db",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py",
        "start_line": 8,
        "end_line": 20,
        "comments": "Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    ",
        "idx": 11
    },
    {
        "id": 9986,
        "kind": "python Function",
        "name": "flaskr.db.close_db",
        "parameters": "e db",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py",
        "start_line": 23,
        "end_line": 30,
        "comments": "If this request connected to the database, close the\n    connection.\n    ",
        "idx": 12
    },
    {
        "id": 15801,
        "kind": "python Function",
        "name": "flaskr.db.init_db",
        "parameters": "db f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py",
        "start_line": 33,
        "end_line": 38,
        "comments": "Clear existing data and create new tables.",
        "idx": 13
    },
    {
        "id": 15802,
        "kind": "python Function",
        "name": "flaskr.db.init_db_command",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py",
        "start_line": 43,
        "end_line": 46,
        "comments": "Clear existing data and create new tables.",
        "idx": 14
    },
    {
        "id": 15799,
        "kind": "python Function",
        "name": "flaskr.db.init_app",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/db.py",
        "start_line": 49,
        "end_line": 54,
        "comments": "Register database functions with the Flask app. This is called by\n    the application factory.\n    ",
        "idx": 15
    },
    {
        "id": 10802,
        "kind": "python Function",
        "name": "flaskr.create_app",
        "parameters": "test_config hello app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/flaskr/__init__.py",
        "start_line": 6,
        "end_line": 48,
        "comments": "Create and configure an instance of the Flask application.",
        "idx": 16
    },
    {
        "id": 8043,
        "kind": "python Function",
        "name": "conftest.app",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 62,
        "end_line": 64,
        "comments": "Create and configure a new app instance for each test.",
        "idx": 17
    },
    {
        "id": 8044,
        "kind": "python Function",
        "name": "conftest.app",
        "parameters": "db_fd db_path app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py",
        "start_line": 14,
        "end_line": 33,
        "comments": "Create and configure a new app instance for each test.",
        "idx": 17
    },
    {
        "id": 9914,
        "kind": "python Function",
        "name": "conftest.client",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/javascript/tests/conftest.py",
        "start_line": 14,
        "end_line": 15,
        "comments": "A test client for the app.",
        "idx": 18
    },
    {
        "id": 9915,
        "kind": "python Function",
        "name": "conftest.client",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 80,
        "end_line": 81,
        "comments": "A test client for the app.",
        "idx": 18
    },
    {
        "id": 9916,
        "kind": "python Function",
        "name": "conftest.client",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py",
        "start_line": 37,
        "end_line": 39,
        "comments": "A test client for the app.",
        "idx": 18
    },
    {
        "id": 22104,
        "kind": "python Function",
        "name": "conftest.runner",
        "parameters": "app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/conftest.py",
        "start_line": 43,
        "end_line": 45,
        "comments": "A test runner for the app's Click commands.",
        "idx": 19
    },
    {
        "id": 28788,
        "kind": "python Function",
        "name": "test_factory.test_config",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/examples/tutorial/tests/test_factory.py",
        "start_line": 4,
        "end_line": 7,
        "comments": "Test create_app without passing test config.",
        "idx": 20
    },
    {
        "id": 27488,
        "kind": "python Function",
        "name": "flask.app.setupmethod",
        "parameters": "f wrapper_func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 53,
        "end_line": 67,
        "comments": "Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    ",
        "idx": 21
    },
    {
        "id": 18859,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.name",
        "parameters": "self fn",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 574,
        "end_line": 588,
        "comments": "The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 22
    },
    {
        "id": 17468,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.logger",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 616,
        "end_line": 636,
        "comments": "The ``'flask.app'`` logger, a standard Python\n        :class:`~logging.Logger`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will be set\n        to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be added.\n        See :ref:`logging` for more information.\n\n        .. versionchanged:: 1.0\n            Behavior was simplified. The logger is always named\n            ``flask.app``. The level is only set during configuration, it\n            doesn't check ``app.debug`` each time. Only one format is used,\n            not different ones depending on ``app.debug``. No handlers are\n            removed, and a handler is only added if no handlers are already\n            configured.\n\n        .. versionadded:: 0.3\n        ",
        "idx": 25
    },
    {
        "id": 16387,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.jinja_env",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 639,
        "end_line": 641,
        "comments": "The Jinja2 environment used to load templates.",
        "idx": 26
    },
    {
        "id": 17587,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.make_config",
        "parameters": "self instance_relative root_path defaults",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 652,
        "end_line": 667,
        "comments": "Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 28
    },
    {
        "id": 8748,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.auto_find_instance_path",
        "parameters": "self prefix package_path",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 669,
        "end_line": 680,
        "comments": "Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 29
    },
    {
        "id": 19431,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.open_instance_resource",
        "parameters": "self resource mode",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 682,
        "end_line": 692,
        "comments": "Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        ",
        "idx": 30
    },
    {
        "id": 6062,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask._get_templates_auto_reload",
        "parameters": "self rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 694,
        "end_line": 706,
        "comments": "Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        ",
        "idx": 31
    },
    {
        "id": 10824,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.create_jinja_environment",
        "parameters": "self options rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 716,
        "end_line": 748,
        "comments": "Creates the Jinja2 environment based on :attr:`jinja_options`\n        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\n        the Jinja2 globals and filters after initialization.  Override\n        this function to customize the behavior.\n\n        .. versionadded:: 0.5\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n        ",
        "idx": 32
    },
    {
        "id": 10822,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.create_global_jinja_loader",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 750,
        "end_line": 761,
        "comments": "Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 33
    },
    {
        "id": 22621,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.select_jinja_autoescape",
        "parameters": "self filename",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 763,
        "end_line": 771,
        "comments": "Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        ",
        "idx": 34
    },
    {
        "id": 29710,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.update_template_context",
        "parameters": "self context funcs reqctx bp orig_ctx func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 773,
        "end_line": 796,
        "comments": "Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        ",
        "idx": 35
    },
    {
        "id": 17621,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.make_shell_context",
        "parameters": "self rv processor",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 798,
        "end_line": 808,
        "comments": "Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 36
    },
    {
        "id": 22044,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.run",
        "parameters": "self host port debug load_dotenv options _host _port server_name sn_host sn_port _",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 843,
        "end_line": 948,
        "comments": "Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :ref:`deployment` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        ",
        "idx": 37
    },
    {
        "id": 28784,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.test_client",
        "parameters": "self use_cookies kwargs cls cls",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 950,
        "end_line": 1004,
        "comments": "Creates a test client for this application.  For information\n        about unit testing head over to :ref:`testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        ",
        "idx": 38
    },
    {
        "id": 28778,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.test_cli_runner",
        "parameters": "self kwargs cls cls",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1006,
        "end_line": 1021,
        "comments": "Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        ",
        "idx": 39
    },
    {
        "id": 19440,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.open_session",
        "parameters": "self request",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1023,
        "end_line": 1040,
        "comments": "Creates or opens a new session.  Default implementation stores all\n        session data in a signed cookie.  This requires that the\n        :attr:`secret_key` is set.  Instead of overriding this method\n        we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.open_session``\n            instead.\n\n        :param request: an instance of :attr:`request_class`.\n        ",
        "idx": 40
    },
    {
        "id": 22460,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.save_session",
        "parameters": "self session response",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1042,
        "end_line": 1061,
        "comments": "Saves the session if it needs updates.  For the default\n        implementation, check :meth:`open_session`.  Instead of overriding this\n        method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.save_session``\n            instead.\n\n        :param session: the session to be saved (a\n                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                        object)\n        :param response: an instance of :attr:`response_class`\n        ",
        "idx": 41
    },
    {
        "id": 17610,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.make_null_session",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1063,
        "end_line": 1078,
        "comments": "Creates a new instance of a missing session.  Instead of overriding\n        this method we recommend replacing the :class:`session_interface`.\n\n        .. deprecated: 1.0\n            Will be removed in 1.1. Use ``session_interface.make_null_session``\n            instead.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 42
    },
    {
        "id": 21337,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.register_blueprint",
        "parameters": "self blueprint options first_registration",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1081,
        "end_line": 1115,
        "comments": "Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 43
    },
    {
        "id": 16306,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.iter_blueprints",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1117,
        "end_line": 1122,
        "comments": "Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 44
    },
    {
        "id": 7471,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.add_url_rule",
        "parameters": "self rule endpoint view_func provide_automatic_options options methods required_methods old_func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1125,
        "end_line": 1222,
        "comments": "Connects a URL rule.  Works exactly like the :meth:`route`\n        decorator.  If a view_func is provided it will be registered with the\n        endpoint.\n\n        Basically this example::\n\n            @app.route('/')\n            def index():\n                pass\n\n        Is equivalent to the following::\n\n            def index():\n                pass\n            app.add_url_rule('/', 'index', index)\n\n        If the view_func is not provided you will need to connect the endpoint\n        to a view function like so::\n\n            app.view_functions['index'] = index\n\n        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\n        to customize the behavior via subclassing you only need to change\n        this method.\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        .. versionchanged:: 0.2\n           `view_func` parameter added.\n\n        .. versionchanged:: 0.6\n           ``OPTIONS`` is added automatically as method.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param view_func: the function to call when serving a request to the\n                          provided endpoint\n        :param provide_automatic_options: controls whether the ``OPTIONS``\n            method should be added automatically. This can also be controlled\n            by setting the ``view_func.provide_automatic_options = False``\n            before adding the rule.\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        ",
        "idx": 45
    },
    {
        "id": 21989,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.route",
        "parameters": "self rule options decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1224,
        "end_line": 1252,
        "comments": "A decorator that is used to register a view function for a\n        given URL rule.  This does the same thing as :meth:`add_url_rule`\n        but is intended for decorator usage::\n\n            @app.route('/')\n            def index():\n                return 'Hello World'\n\n        For more information refer to :ref:`url-route-registrations`.\n\n        :param rule: the URL rule as string\n        :param endpoint: the endpoint for the registered URL rule.  Flask\n                         itself assumes the name of the view function as\n                         endpoint\n        :param options: the options to be forwarded to the underlying\n                        :class:`~werkzeug.routing.Rule` object.  A change\n                        to Werkzeug is handling of method options.  methods\n                        is a list of methods this rule should be limited\n                        to (``GET``, ``POST`` etc.).  By default a rule\n                        just listens for ``GET`` (and implicitly ``HEAD``).\n                        Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                        added and handled by the standard request handling.\n        ",
        "idx": 46
    },
    {
        "id": 12201,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.endpoint",
        "parameters": "self endpoint decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1255,
        "end_line": 1268,
        "comments": "A decorator to register a function as an endpoint.\n        Example::\n\n            @app.endpoint('example.endpoint')\n            def example():\n                return \"example\"\n\n        :param endpoint: the name of the endpoint\n        ",
        "idx": 47
    },
    {
        "id": 5992,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask._get_exc_class_and_code",
        "parameters": "exc_class_or_code exc_class",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1271,
        "end_line": 1283,
        "comments": "Ensure that we register only exceptions as handler keys",
        "idx": 48
    },
    {
        "id": 12439,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.errorhandler",
        "parameters": "self code_or_exception decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1286,
        "end_line": 1318,
        "comments": "Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        ",
        "idx": 49
    },
    {
        "id": 21341,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.register_error_handler",
        "parameters": "self code_or_exception f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1321,
        "end_line": 1328,
        "comments": "Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 50
    },
    {
        "id": 6711,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask._register_error_handler",
        "parameters": "self key code_or_exception f exc_class code handlers",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1331,
        "end_line": 1353,
        "comments": "\n        :type key: None|str\n        :type code_or_exception: int|T<=Exception\n        :type f: callable\n        ",
        "idx": 51
    },
    {
        "id": 28599,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.template_filter",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1356,
        "end_line": 1371,
        "comments": "A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
        "idx": 52
    },
    {
        "id": 7460,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.add_template_filter",
        "parameters": "self f name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1374,
        "end_line": 1381,
        "comments": "Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
        "idx": 53
    },
    {
        "id": 28616,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.template_test",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1384,
        "end_line": 1406,
        "comments": "A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
        "idx": 54
    },
    {
        "id": 7464,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.add_template_test",
        "parameters": "self f name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1409,
        "end_line": 1418,
        "comments": "Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
        "idx": 55
    },
    {
        "id": 28607,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.template_global",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1421,
        "end_line": 1438,
        "comments": "A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        ",
        "idx": 56
    },
    {
        "id": 7462,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.add_template_global",
        "parameters": "self f name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1441,
        "end_line": 1450,
        "comments": "Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        ",
        "idx": 57
    },
    {
        "id": 8965,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.before_request",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1453,
        "end_line": 1464,
        "comments": "Registers a function to run before each request.\n\n        For example, this can be used to open a database connection, or to load\n        the logged in user from the session.\n\n        The function will be called without any arguments. If it returns a\n        non-None value, the value is handled as if it was the return value from\n        the view, and further request handling is stopped.\n        ",
        "idx": 58
    },
    {
        "id": 8948,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.before_first_request",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1467,
        "end_line": 1477,
        "comments": "Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 59
    },
    {
        "id": 7536,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.after_request",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1480,
        "end_line": 1491,
        "comments": "Register a function to be run after each request.\n\n        Your function must take one parameter, an instance of\n        :attr:`response_class` and return a new response object or the\n        same (see :meth:`process_response`).\n\n        As of Flask 0.7 this function might not be executed at the end of the\n        request in case an unhandled exception occurred.\n        ",
        "idx": 60
    },
    {
        "id": 28558,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.teardown_request",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1494,
        "end_line": 1530,
        "comments": "Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Generally teardown functions must take every necessary step to avoid\n        that they will fail.  If they do execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        ",
        "idx": 61
    },
    {
        "id": 28546,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.teardown_appcontext",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1533,
        "end_line": 1563,
        "comments": "Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        ",
        "idx": 62
    },
    {
        "id": 10641,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.context_processor",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1566,
        "end_line": 1569,
        "comments": "Registers a template context processor function.",
        "idx": 63
    },
    {
        "id": 27500,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.shell_context_processor",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1572,
        "end_line": 1578,
        "comments": "Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 64
    },
    {
        "id": 29843,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.url_value_preprocessor",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1581,
        "end_line": 1595,
        "comments": "Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        ",
        "idx": 65
    },
    {
        "id": 29810,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.url_defaults",
        "parameters": "self f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1598,
        "end_line": 1604,
        "comments": "Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        ",
        "idx": 66
    },
    {
        "id": 5843,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask._find_error_handler",
        "parameters": "self e exc_class code name c handler_map cls handler",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1606,
        "end_line": 1627,
        "comments": "Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        ",
        "idx": 67
    },
    {
        "id": 14938,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.handle_http_exception",
        "parameters": "self e handler",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1629,
        "end_line": 1644,
        "comments": "Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionadded:: 0.3\n        ",
        "idx": 68
    },
    {
        "id": 29453,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.trap_http_exception",
        "parameters": "self e trap_bad_request",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1646,
        "end_line": 1678,
        "comments": "Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 69
    },
    {
        "id": 14948,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.handle_user_exception",
        "parameters": "self e exc_type exc_value tb handler",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1680,
        "end_line": 1719,
        "comments": "This method is called whenever an exception occurs that should be\n        handled.  A special case are\n        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by\n        this function to the :meth:`handle_http_exception` method.  This\n        function will either return a response value or reraise the\n        exception with the same traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the bad\n            key in debug mode rather than a generic bad request message.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 70
    },
    {
        "id": 14933,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.handle_exception",
        "parameters": "self e exc_type exc_value tb handler",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1721,
        "end_line": 1747,
        "comments": "Default exception handling that kicks in when an exception\n        occurs that is not caught.  In debug mode the exception will\n        be re-raised immediately, otherwise it is logged and the handler\n        for a 500 internal server error is used.  If no such handler\n        exists, a default 500 internal server error message is displayed.\n\n        .. versionadded:: 0.3\n        ",
        "idx": 71
    },
    {
        "id": 17450,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.log_exception",
        "parameters": "self exc_info",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1749,
        "end_line": 1760,
        "comments": "Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 72
    },
    {
        "id": 21055,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.raise_routing_exception",
        "parameters": "self request",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1762,
        "end_line": 1776,
        "comments": "Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        ",
        "idx": 73
    },
    {
        "id": 11616,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.dispatch_request",
        "parameters": "self req rule",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1778,
        "end_line": 1798,
        "comments": "Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        ",
        "idx": 74
    },
    {
        "id": 14080,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.full_dispatch_request",
        "parameters": "self rv e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1800,
        "end_line": 1815,
        "comments": "Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 75
    },
    {
        "id": 13442,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.finalize_request",
        "parameters": "self rv from_error_handler response",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1817,
        "end_line": 1839,
        "comments": "Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        ",
        "idx": 76
    },
    {
        "id": 29474,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.try_trigger_before_first_request_functions",
        "parameters": "self func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1841,
        "end_line": 1855,
        "comments": "Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        ",
        "idx": 77
    },
    {
        "id": 17591,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.make_default_options_response",
        "parameters": "self adapter methods e rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1857,
        "end_line": 1878,
        "comments": "This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 78
    },
    {
        "id": 27519,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.should_ignore_error",
        "parameters": "self error",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1880,
        "end_line": 1888,
        "comments": "This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        ",
        "idx": 79
    },
    {
        "id": 17615,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.make_response",
        "parameters": "self rv status headers len_rv e new_error",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1890,
        "end_line": 1994,
        "comments": "Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str`` (``unicode`` in Python 2)\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes`` (``str`` in Python 2)\n                A response object is created with the bytes as the body.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        ",
        "idx": 80
    },
    {
        "id": 10836,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.create_url_adapter",
        "parameters": "self request subdomain",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 1996,
        "end_line": 2027,
        "comments": "Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        ",
        "idx": 81
    },
    {
        "id": 15814,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.inject_url_defaults",
        "parameters": "self endpoint values funcs bp func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2029,
        "end_line": 2041,
        "comments": "Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        ",
        "idx": 82
    },
    {
        "id": 14946,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.handle_url_build_error",
        "parameters": "self error endpoint values exc_type exc_value tb handler rv e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2043,
        "end_line": 2061,
        "comments": "Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n        ",
        "idx": 83
    },
    {
        "id": 20789,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.preprocess_request",
        "parameters": "self bp funcs func rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2063,
        "end_line": 2088,
        "comments": "Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        ",
        "idx": 84
    },
    {
        "id": 20848,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.process_response",
        "parameters": "self response ctx bp funcs handler",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2090,
        "end_line": 2114,
        "comments": "Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        ",
        "idx": 85
    },
    {
        "id": 11754,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.do_teardown_request",
        "parameters": "self exc funcs bp func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2116,
        "end_line": 2145,
        "comments": "Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        ",
        "idx": 86
    },
    {
        "id": 11752,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.do_teardown_appcontext",
        "parameters": "self exc func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2147,
        "end_line": 2166,
        "comments": "Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        ",
        "idx": 87
    },
    {
        "id": 8057,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.app_context",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2168,
        "end_line": 2187,
        "comments": "Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        ",
        "idx": 88
    },
    {
        "id": 21646,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.request_context",
        "parameters": "self environ",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2189,
        "end_line": 2203,
        "comments": "Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        ",
        "idx": 89
    },
    {
        "id": 28966,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.test_request_context",
        "parameters": "self args kwargs builder",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2205,
        "end_line": 2259,
        "comments": "Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        ",
        "idx": 90
    },
    {
        "id": 30843,
        "kind": "python Function Attribute",
        "name": "flask.app.Flask.wsgi_app",
        "parameters": "self environ start_response ctx error response e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2261,
        "end_line": 2302,
        "comments": "The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        ",
        "idx": 91
    },
    {
        "id": 2888,
        "kind": "python Function Attribute Special",
        "name": "flask.app.Flask.__call__",
        "parameters": "self environ start_response",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/app.py",
        "start_line": 2304,
        "end_line": 2308,
        "comments": "The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app` which can be\n        wrapped to applying middleware.",
        "idx": 92
    },
    {
        "id": 7472,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.BlueprintSetupState.add_url_rule",
        "parameters": "self rule endpoint view_func options defaults",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 62,
        "end_line": 80,
        "comments": "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n        the :func:`url_for` function is prefixed with the name of the blueprint.\n        ",
        "idx": 99
    },
    {
        "id": 7473,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.add_url_rule",
        "parameters": "self rule endpoint view_func options s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 199,
        "end_line": 208,
        "comments": "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n        the :func:`url_for` function is prefixed with the name of the blueprint.\n        ",
        "idx": 99
    },
    {
        "id": 21259,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.record",
        "parameters": "self func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 134,
        "end_line": 145,
        "comments": "Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        ",
        "idx": 94
    },
    {
        "id": 21261,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.record_once",
        "parameters": "self func wrapper",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 147,
        "end_line": 156,
        "comments": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ",
        "idx": 95
    },
    {
        "id": 17619,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.make_setup_state",
        "parameters": "self app options first_registration",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 158,
        "end_line": 163,
        "comments": "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        ",
        "idx": 96
    },
    {
        "id": 21331,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.register",
        "parameters": "self app options first_registration state deferred",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 165,
        "end_line": 187,
        "comments": "Called by :meth:`Flask.register_blueprint` to register all views\n        and callbacks registered on the blueprint with the application. Creates\n        a :class:`.BlueprintSetupState` and calls each :meth:`record` callback\n        with it.\n\n        :param app: The application this blueprint is being registered with.\n        :param options: Keyword arguments forwarded from\n            :meth:`~Flask.register_blueprint`.\n        :param first_registration: Whether this is the first time this\n            blueprint has been registered on the application.\n        ",
        "idx": 97
    },
    {
        "id": 21990,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.route",
        "parameters": "self rule options decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 189,
        "end_line": 197,
        "comments": "Like :meth:`Flask.route` but for a blueprint.  The endpoint for the\n        :func:`url_for` function is prefixed with the name of the blueprint.\n        ",
        "idx": 98
    },
    {
        "id": 7472,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.BlueprintSetupState.add_url_rule",
        "parameters": "self rule endpoint view_func options defaults",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 62,
        "end_line": 80,
        "comments": "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n        the :func:`url_for` function is prefixed with the name of the blueprint.\n        ",
        "idx": 99
    },
    {
        "id": 7473,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.add_url_rule",
        "parameters": "self rule endpoint view_func options s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 199,
        "end_line": 208,
        "comments": "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n        the :func:`url_for` function is prefixed with the name of the blueprint.\n        ",
        "idx": 99
    },
    {
        "id": 12203,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.endpoint",
        "parameters": "self endpoint decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 210,
        "end_line": 222,
        "comments": "Like :meth:`Flask.endpoint` but for a blueprint.  This does not\n        prefix the endpoint with the blueprint name, this has to be done\n        explicitly by the user of this method.  If the endpoint is prefixed\n        with a `.` it will be registered to the current blueprint, otherwise\n        it's an application independent endpoint.\n        ",
        "idx": 100
    },
    {
        "id": 8094,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_template_filter",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 224,
        "end_line": 234,
        "comments": "Register a custom template filter, available application wide.  Like\n        :meth:`Flask.template_filter` but for a blueprint.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
        "idx": 101
    },
    {
        "id": 7416,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.add_app_template_filter",
        "parameters": "self f name register_template",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 236,
        "end_line": 246,
        "comments": "Register a custom template filter, available application wide.  Like\n        :meth:`Flask.add_template_filter` but for a blueprint.  Works exactly\n        like the :meth:`app_template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
        "idx": 102
    },
    {
        "id": 8098,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_template_test",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 248,
        "end_line": 260,
        "comments": "Register a custom template test, available application wide.  Like\n        :meth:`Flask.template_test` but for a blueprint.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
        "idx": 103
    },
    {
        "id": 7420,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.add_app_template_test",
        "parameters": "self f name register_template",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 262,
        "end_line": 274,
        "comments": "Register a custom template test, available application wide.  Like\n        :meth:`Flask.add_template_test` but for a blueprint.  Works exactly\n        like the :meth:`app_template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
        "idx": 104
    },
    {
        "id": 8096,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_template_global",
        "parameters": "self name decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 276,
        "end_line": 288,
        "comments": "Register a custom template global, available application wide.  Like\n        :meth:`Flask.template_global` but for a blueprint.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        ",
        "idx": 105
    },
    {
        "id": 7418,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.add_app_template_global",
        "parameters": "self f name register_template",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 290,
        "end_line": 302,
        "comments": "Register a custom template global, available application wide.  Like\n        :meth:`Flask.add_template_global` but for a blueprint.  Works exactly\n        like the :meth:`app_template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        ",
        "idx": 106
    },
    {
        "id": 8966,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.before_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 304,
        "end_line": 311,
        "comments": "Like :meth:`Flask.before_request` but for a blueprint.  This function\n        is only executed before each request that is handled by a function of\n        that blueprint.\n        ",
        "idx": 107
    },
    {
        "id": 8945,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.before_app_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 313,
        "end_line": 319,
        "comments": "Like :meth:`Flask.before_request`.  Such a function is executed\n        before each request, even if outside of a blueprint.\n        ",
        "idx": 108
    },
    {
        "id": 8943,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.before_app_first_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 321,
        "end_line": 326,
        "comments": "Like :meth:`Flask.before_first_request`.  Such a function is\n        executed before the first request to the application.\n        ",
        "idx": 109
    },
    {
        "id": 7537,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.after_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 328,
        "end_line": 335,
        "comments": "Like :meth:`Flask.after_request` but for a blueprint.  This function\n        is only executed after each request that is handled by a function of\n        that blueprint.\n        ",
        "idx": 110
    },
    {
        "id": 7530,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.after_app_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 337,
        "end_line": 343,
        "comments": "Like :meth:`Flask.after_request` but for a blueprint.  Such a function\n        is executed after each request, even if outside of the blueprint.\n        ",
        "idx": 111
    },
    {
        "id": 28559,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.teardown_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 345,
        "end_line": 354,
        "comments": "Like :meth:`Flask.teardown_request` but for a blueprint.  This\n        function is only executed when tearing down requests handled by a\n        function of that blueprint.  Teardown request functions are executed\n        when the request context is popped, even when no actual request was\n        performed.\n        ",
        "idx": 112
    },
    {
        "id": 28545,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.teardown_app_request",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 356,
        "end_line": 363,
        "comments": "Like :meth:`Flask.teardown_request` but for a blueprint.  Such a\n        function is executed when tearing down each request, even if outside of\n        the blueprint.\n        ",
        "idx": 113
    },
    {
        "id": 10642,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.context_processor",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 365,
        "end_line": 371,
        "comments": "Like :meth:`Flask.context_processor` but for a blueprint.  This\n        function is only executed for requests handled by a blueprint.\n        ",
        "idx": 114
    },
    {
        "id": 8059,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_context_processor",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 373,
        "end_line": 379,
        "comments": "Like :meth:`Flask.context_processor` but for a blueprint.  Such a\n        function is executed each request, even if outside of the blueprint.\n        ",
        "idx": 115
    },
    {
        "id": 8077,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_errorhandler",
        "parameters": "self code decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 381,
        "end_line": 388,
        "comments": "Like :meth:`Flask.errorhandler` but for a blueprint.  This\n        handler is used for all requests, even if outside of the blueprint.\n        ",
        "idx": 116
    },
    {
        "id": 29844,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.url_value_preprocessor",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 390,
        "end_line": 397,
        "comments": "Registers a function as URL value preprocessor for this\n        blueprint.  It's called before the view functions are called and\n        can modify the url values provided.\n        ",
        "idx": 117
    },
    {
        "id": 29812,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.url_defaults",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 399,
        "end_line": 406,
        "comments": "Callback function for URL defaults for this blueprint.  It's called\n        with the endpoint and values and should update the values passed\n        in place.\n        ",
        "idx": 118
    },
    {
        "id": 8103,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_url_value_preprocessor",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 408,
        "end_line": 413,
        "comments": "Same as :meth:`url_value_preprocessor` but application wide.\n        ",
        "idx": 119
    },
    {
        "id": 8101,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.app_url_defaults",
        "parameters": "self f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 415,
        "end_line": 420,
        "comments": "Same as :meth:`url_defaults` but application wide.\n        ",
        "idx": 120
    },
    {
        "id": 12440,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.errorhandler",
        "parameters": "self code_or_exception decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 422,
        "end_line": 437,
        "comments": "Registers an error handler that becomes active for this blueprint\n        only.  Please be aware that routing does not happen local to a\n        blueprint so an error handler for 404 usually is not handled by\n        a blueprint unless it is caused inside a view function.  Another\n        special case is the 500 internal server error which is always looked\n        up from the application.\n\n        Otherwise works as the :meth:`~flask.Flask.errorhandler` decorator\n        of the :class:`~flask.Flask` object.\n        ",
        "idx": 121
    },
    {
        "id": 21342,
        "kind": "python Function Attribute",
        "name": "flask.blueprints.Blueprint.register_error_handler",
        "parameters": "self code_or_exception f s",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/blueprints.py",
        "start_line": 439,
        "end_line": 448,
        "comments": "Non-decorator version of the :meth:`errorhandler` error attach\n        function, akin to the :meth:`~flask.Flask.register_error_handler`\n        application-wide function of the :class:`~flask.Flask` object but\n        for error handlers limited to this blueprint.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 122
    },
    {
        "id": 13457,
        "kind": "python Function",
        "name": "flask.cli.find_best_app",
        "parameters": "script_info module attr_name app matches app_factory",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 43,
        "end_line": 97,
        "comments": "Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    ",
        "idx": 123
    },
    {
        "id": 9375,
        "kind": "python Function",
        "name": "flask.cli.call_factory",
        "parameters": "script_info app_factory arguments args_spec arg_names arg_defaults",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 100,
        "end_line": 116,
        "comments": "Takes an app factory, a ``script_info` object and  optionally a tuple\n    of arguments. Checks for the existence of a script_info argument and calls\n    the app_factory depending on that and the arguments provided.\n    ",
        "idx": 124
    },
    {
        "id": 5474,
        "kind": "python Function",
        "name": "flask.cli._called_with_wrong_args",
        "parameters": "factory tb",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 119,
        "end_line": 140,
        "comments": "Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param factory: the factory function that was called\n    :return: true if the call failed\n    ",
        "idx": 125
    },
    {
        "id": 13456,
        "kind": "python Function",
        "name": "flask.cli.find_app_by_string",
        "parameters": "script_info module app_name match name args attr e app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 143,
        "end_line": 200,
        "comments": "Checks if the given string is a variable name or a function. If it is a\n    function, it checks for specified arguments and whether it takes a\n    ``script_info`` argument and calls the function with the appropriate\n    arguments.\n    ",
        "idx": 126
    },
    {
        "id": 20788,
        "kind": "python Function",
        "name": "flask.cli.prepare_import",
        "parameters": "path fname ext module_name name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 203,
        "end_line": 229,
        "comments": "Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    ",
        "idx": 127
    },
    {
        "id": 30707,
        "kind": "python Function",
        "name": "flask.cli.with_appcontext",
        "parameters": "f decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 404,
        "end_line": 414,
        "comments": "Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.  If callbacks are registered directly\n    to the ``app.cli`` object then they are wrapped with this function\n    by default unless it's disabled.\n    ",
        "idx": 128
    },
    {
        "id": 6580,
        "kind": "python Function",
        "name": "flask.cli._path_is_ancestor",
        "parameters": "path other",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 566,
        "end_line": 570,
        "comments": "Take ``other`` and remove the length of ``path`` from it. Then join it\n    to ``path``. If it is the original value, ``path`` is an ancestor of\n    ``other``.",
        "idx": 129
    },
    {
        "id": 17308,
        "kind": "python Function",
        "name": "flask.cli.load_dotenv",
        "parameters": "path new_dir name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 573,
        "end_line": 619,
        "comments": "Load \"dotenv\" files in order of precedence to set environment variables.\n\n    If an env var is already set it is not overwritten, so earlier files in the\n    list are preferred over later files.\n\n    Changes the current working directory to the location of the first file\n    found, with the assumption that it is in the top level project directory\n    and will be where the Python path should import local packages from.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location instead of searching.\n    :return: ``True`` if a file was loaded.\n\n    .. versionadded:: 1.0\n    ",
        "idx": 130
    },
    {
        "id": 27523,
        "kind": "python Function",
        "name": "flask.cli.show_server_banner",
        "parameters": "env debug app_import_path eager_loading message",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 622,
        "end_line": 646,
        "comments": "Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    ",
        "idx": 131
    },
    {
        "id": 7088,
        "kind": "python Function",
        "name": "flask.cli._validate_key",
        "parameters": "ctx param value cert is_adhoc is_context",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 689,
        "end_line": 725,
        "comments": "The ``--key`` option must be specified when ``--cert`` is a file.\n    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n    ",
        "idx": 132
    },
    {
        "id": 22061,
        "kind": "python Function",
        "name": "flask.cli.run_command",
        "parameters": "info host port reload debugger eager_loading with_threads cert debug app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 751,
        "end_line": 777,
        "comments": "Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and debugger are enabled by default if\n    FLASK_ENV=development or FLASK_DEBUG=1.\n    ",
        "idx": 133
    },
    {
        "id": 27499,
        "kind": "python Function",
        "name": "flask.cli.shell_command",
        "parameters": "app banner ctx startup f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 782,
        "end_line": 811,
        "comments": "Runs an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to it's configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    ",
        "idx": 134
    },
    {
        "id": 21991,
        "kind": "python Function",
        "name": "flask.cli.routes_command",
        "parameters": "sort all_methods rules ignored_methods rule_methods headers widths row rule",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 830,
        "end_line": 862,
        "comments": "Show all registered routes with endpoints and methods.",
        "idx": 135
    },
    {
        "id": 17302,
        "kind": "python Function Attribute",
        "name": "flask.cli.ScriptInfo.load_app",
        "parameters": "self __traceback_hide__ app path name import_name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 357,
        "end_line": 398,
        "comments": "Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        ",
        "idx": 136
    },
    {
        "id": 10378,
        "kind": "python Function Attribute",
        "name": "flask.cli.AppGroup.command",
        "parameters": "self args kwargs decorator wrap_for_ctx",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 425,
        "end_line": 435,
        "comments": "This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        ",
        "idx": 137
    },
    {
        "id": 14880,
        "kind": "python Function Attribute",
        "name": "flask.cli.AppGroup.group",
        "parameters": "self args kwargs",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/cli.py",
        "start_line": 437,
        "end_line": 443,
        "comments": "This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        ",
        "idx": 138
    },
    {
        "id": 13975,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.from_envvar",
        "parameters": "self variable_name silent rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 88,
        "end_line": 109,
        "comments": "Loads a configuration from an environment variable pointing to\n        a configuration file.  This is basically just a shortcut with nicer\n        error messages for this line of code::\n\n            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n        :param variable_name: name of the environment variable\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: bool. ``True`` if able to load config, ``False`` otherwise.\n        ",
        "idx": 139
    },
    {
        "id": 13994,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.from_pyfile",
        "parameters": "self filename silent d config_file e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 111,
        "end_line": 139,
        "comments": "Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        ",
        "idx": 140
    },
    {
        "id": 13992,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.from_object",
        "parameters": "self obj key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 141,
        "end_line": 173,
        "comments": "Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        ",
        "idx": 141
    },
    {
        "id": 13984,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.from_json",
        "parameters": "self filename silent json_file obj e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 175,
        "end_line": 198,
        "comments": "Updates the values in the config from a JSON file. This function\n        behaves as if the JSON object was a dictionary and passed to the\n        :meth:`from_mapping` function.\n\n        :param filename: the filename of the JSON file.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 142
    },
    {
        "id": 13989,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.from_mapping",
        "parameters": "self mapping kwargs mappings key value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 200,
        "end_line": 221,
        "comments": "Updates the config like :meth:`update` ignoring items with non-upper\n        keys.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 143
    },
    {
        "id": 14531,
        "kind": "python Function Attribute",
        "name": "flask.config.Config.get_namespace",
        "parameters": "self namespace lowercase trim_namespace rv k v key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/config.py",
        "start_line": 223,
        "end_line": 262,
        "comments": "Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::\n\n            app.config['IMAGE_STORE_TYPE'] = 'fs'\n            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n            image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\n        The resulting dictionary `image_store_config` would look like::\n\n            {\n                'type': 'fs',\n                'path': '/var/app/images',\n                'base_url': 'http://img.website.com'\n            }\n\n        This is often useful when configuration options map directly to\n        keyword arguments in functions or class constructors.\n\n        :param namespace: a configuration namespace\n        :param lowercase: a flag indicating if the keys of the resulting\n                          dictionary should be lowercase\n        :param trim_namespace: a flag indicating if the keys of the resulting\n                          dictionary should not include the namespace\n\n        .. versionadded:: 0.11\n        ",
        "idx": 144
    },
    {
        "id": 7542,
        "kind": "python Function",
        "name": "flask.ctx.after_this_request",
        "parameters": "f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 96,
        "end_line": 118,
        "comments": "Executes a function after this request.  This is useful to modify\n    response objects.  The function is passed the response object and has\n    to return the same or a new one.\n\n    Example::\n\n        @app.route('/')\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers['X-Foo'] = 'Parachute'\n                return response\n            return 'Hello World!'\n\n    This is more useful if a function other than the view function wants to\n    modify a response.  For instance think of a decorator that wants to add\n    some headers without converting the return value into a response object.\n\n    .. versionadded:: 0.9\n    ",
        "idx": 145
    },
    {
        "id": 10725,
        "kind": "python Function",
        "name": "flask.ctx.copy_current_request_context",
        "parameters": "f wrapper top reqctx",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 121,
        "end_line": 154,
        "comments": "A helper function that decorates a function to retain the current\n    request context.  This is useful when working with greenlets.  The moment\n    the function is decorated a copy of the request context is created and\n    then pushed when the function is called.  The current session is also\n    included in the copied request context.\n\n    Example::\n\n        import gevent\n        from flask import copy_current_request_context\n\n        @app.route('/')\n        def index():\n            @copy_current_request_context\n            def do_some_work():\n                # do some work here, it can access flask.request or\n                # flask.session like you would otherwise in the view function.\n                ...\n            gevent.spawn(do_some_work)\n            return 'Regular response'\n\n    .. versionadded:: 0.10\n    ",
        "idx": 146
    },
    {
        "id": 15007,
        "kind": "python Function",
        "name": "flask.ctx.has_request_context",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 157,
        "end_line": 186,
        "comments": "If you have code that wants to test if a request context is there or\n    not this function can be used.  For instance, you may want to take advantage\n    of request information if the request object is available, but fail\n    silently if it is unavailable.\n\n    ::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and has_request_context():\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    Alternatively you can also just test any of the context bound objects\n    (such as :class:`request` or :class:`g` for truthness)::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and request:\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    .. versionadded:: 0.7\n    ",
        "idx": 147
    },
    {
        "id": 14980,
        "kind": "python Function",
        "name": "flask.ctx.has_app_context",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 189,
        "end_line": 196,
        "comments": "Works like :func:`has_request_context` but for the application\n    context.  You can also just do a boolean check on the\n    :data:`current_app` object instead.\n\n    .. versionadded:: 0.9\n    ",
        "idx": 148
    },
    {
        "id": 14312,
        "kind": "python Function Attribute",
        "name": "flask.ctx._AppCtxGlobals.get",
        "parameters": "self name default",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 46,
        "end_line": 55,
        "comments": "Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        ",
        "idx": 149
    },
    {
        "id": 20588,
        "kind": "python Function Attribute",
        "name": "flask.ctx._AppCtxGlobals.pop",
        "parameters": "self name default",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 57,
        "end_line": 69,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20589,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.pop",
        "parameters": "self exc app_ctx clear_request request_close rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 394,
        "end_line": 437,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20590,
        "kind": "python Function Attribute",
        "name": "flask.ctx.AppContext.pop",
        "parameters": "self exc rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 225,
        "end_line": 237,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 27435,
        "kind": "python Function Attribute",
        "name": "flask.ctx._AppCtxGlobals.setdefault",
        "parameters": "self name default",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 71,
        "end_line": 81,
        "comments": "Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param: default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 151
    },
    {
        "id": 20960,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.push",
        "parameters": "self top app_ctx session_interface",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 352,
        "end_line": 392,
        "comments": "Binds the request context to the current context.",
        "idx": 156
    },
    {
        "id": 20961,
        "kind": "python Function Attribute",
        "name": "flask.ctx.AppContext.push",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 217,
        "end_line": 223,
        "comments": "Binds the request context to the current context.",
        "idx": 156
    },
    {
        "id": 20588,
        "kind": "python Function Attribute",
        "name": "flask.ctx._AppCtxGlobals.pop",
        "parameters": "self name default",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 57,
        "end_line": 69,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20589,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.pop",
        "parameters": "self exc app_ctx clear_request request_close rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 394,
        "end_line": 437,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20590,
        "kind": "python Function Attribute",
        "name": "flask.ctx.AppContext.pop",
        "parameters": "self exc rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 225,
        "end_line": 237,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 10702,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.copy",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 322,
        "end_line": 339,
        "comments": "Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        ",
        "idx": 154
    },
    {
        "id": 17711,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.match_request",
        "parameters": "self url_rule e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 341,
        "end_line": 350,
        "comments": "Can be overridden by a subclass to hook into the matching\n        of the request.\n        ",
        "idx": 155
    },
    {
        "id": 20960,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.push",
        "parameters": "self top app_ctx session_interface",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 352,
        "end_line": 392,
        "comments": "Binds the request context to the current context.",
        "idx": 156
    },
    {
        "id": 20961,
        "kind": "python Function Attribute",
        "name": "flask.ctx.AppContext.push",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 217,
        "end_line": 223,
        "comments": "Binds the request context to the current context.",
        "idx": 156
    },
    {
        "id": 20588,
        "kind": "python Function Attribute",
        "name": "flask.ctx._AppCtxGlobals.pop",
        "parameters": "self name default",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 57,
        "end_line": 69,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20589,
        "kind": "python Function Attribute",
        "name": "flask.ctx.RequestContext.pop",
        "parameters": "self exc app_ctx clear_request request_close rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 394,
        "end_line": 437,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 20590,
        "kind": "python Function Attribute",
        "name": "flask.ctx.AppContext.pop",
        "parameters": "self exc rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/ctx.py",
        "start_line": 225,
        "end_line": 237,
        "comments": "Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        ",
        "idx": 157
    },
    {
        "id": 8662,
        "kind": "python Function",
        "name": "flask.debughelpers.attach_enctype_error_multidict",
        "parameters": "request newcls oldcls",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/debughelpers.py",
        "start_line": 78,
        "end_line": 94,
        "comments": "Since Flask 0.8 we're monkeypatching the files object in case a\n    request is detected that does not use multipart form data but the files\n    object is accessed.\n    ",
        "idx": 158
    },
    {
        "id": 12823,
        "kind": "python Function",
        "name": "flask.debughelpers.explain_template_loading_attempts",
        "parameters": "app template attempts info total_found blueprint reqctx idx loader srcobj triple src_info line detail seems_fishy",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/debughelpers.py",
        "start_line": 114,
        "end_line": 159,
        "comments": "This should help developers understand what failed",
        "idx": 159
    },
    {
        "id": 14453,
        "kind": "python Function",
        "name": "flask.helpers.get_env",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 49,
        "end_line": 54,
        "comments": "Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    ",
        "idx": 160
    },
    {
        "id": 14432,
        "kind": "python Function",
        "name": "flask.helpers.get_debug_flag",
        "parameters": "val",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 57,
        "end_line": 68,
        "comments": "Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    ",
        "idx": 161
    },
    {
        "id": 14506,
        "kind": "python Function",
        "name": "flask.helpers.get_load_dotenv",
        "parameters": "default val",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 71,
        "end_line": 83,
        "comments": "Get whether the user has disabled loading dotenv files by setting\n    :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load the\n    files.\n\n    :param default: What to return if the env var isn't set.\n    ",
        "idx": 162
    },
    {
        "id": 5748,
        "kind": "python Function",
        "name": "flask.helpers._endpoint_from_view_func",
        "parameters": "view_func",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 86,
        "end_line": 92,
        "comments": "Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    ",
        "idx": 163
    },
    {
        "id": 28162,
        "kind": "python Function",
        "name": "flask.helpers.stream_with_context",
        "parameters": "generator_or_function decorator generator gen wrapped_g",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 95,
        "end_line": 164,
        "comments": "Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot access request bound\n    information any more.\n\n    This function however can help you keep the context around for longer::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(generate())\n\n    Alternatively it can also be used around a specific generator::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    ",
        "idx": 164
    },
    {
        "id": 17614,
        "kind": "python Function",
        "name": "flask.helpers.make_response",
        "parameters": "args",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 167,
        "end_line": 213,
        "comments": "Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n        def index():\n            return render_template('index.html', foo=42)\n\n    You can now do something like this::\n\n        def index():\n            response = make_response(render_template('index.html', foo=42))\n            response.headers['X-Parachutes'] = 'parachutes are cool'\n            return response\n\n    This function accepts the very same arguments you can return from a\n    view function.  This for example creates a response with a 404 error\n    code::\n\n        response = make_response(render_template('not_found.html'), 404)\n\n    The other use case of this function is to force the return value of a\n    view function into a response which is helpful with view\n    decorators::\n\n        response = make_response(view_function())\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n\n    Internally this function does the following things:\n\n    -   if no arguments are passed, it creates a new response argument\n    -   if one argument is passed, :meth:`flask.Flask.make_response`\n        is invoked with it.\n    -   if more than one argument is passed, the arguments are passed\n        to the :meth:`flask.Flask.make_response` function as tuple.\n\n    .. versionadded:: 0.6\n    ",
        "idx": 165
    },
    {
        "id": 29817,
        "kind": "python Function",
        "name": "flask.helpers.url_for",
        "parameters": "endpoint values appctx reqctx url_adapter blueprint_name external anchor method scheme old_scheme rv error",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 216,
        "end_line": 360,
        "comments": "Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    For more information, head over to the :ref:`Quickstart <url-building>`.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type, exc_value, tb\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      defaults to `localhost`.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n      request context is available. As of Werkzeug 0.10, this also can be set\n      to an empty string to build protocol-relative URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    ",
        "idx": 166
    },
    {
        "id": 14613,
        "kind": "python Function",
        "name": "flask.helpers.get_template_attribute",
        "parameters": "template_name attribute",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 363,
        "end_line": 383,
        "comments": "Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')\n        return hello('World')\n\n    .. versionadded:: 0.2\n\n    :param template_name: the name of the template\n    :param attribute: the name of the variable of macro to access\n    ",
        "idx": 167
    },
    {
        "id": 13611,
        "kind": "python Function",
        "name": "flask.helpers.flash",
        "parameters": "message category flashes",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 386,
        "end_line": 412,
        "comments": "Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for any kind of message,\n                     ``'error'`` for errors, ``'info'`` for information\n                     messages and ``'warning'`` for warnings.  However any\n                     kind of string can be used as category.\n    ",
        "idx": 168
    },
    {
        "id": 14474,
        "kind": "python Function",
        "name": "flask.helpers.get_flashed_messages",
        "parameters": "with_categories category_filter flashes f",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 415,
        "end_line": 451,
        "comments": "Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the flashed messages to one or more categories by providing those\n    categories in `category_filter`.  This allows rendering categories in\n    separate html blocks.  The `with_categories` and `category_filter`\n    arguments are distinct:\n\n    * `with_categories` controls whether categories are returned with message\n      text (``True`` gives a tuple, where ``False`` gives just the message text).\n    * `category_filter` filters the messages down to only those matching the\n      provided categories.\n\n    See :ref:`message-flashing-pattern` for examples.\n\n    .. versionchanged:: 0.3\n       `with_categories` parameter added.\n\n    .. versionchanged:: 0.9\n        `category_filter` parameter added.\n\n    :param with_categories: set to ``True`` to also receive categories.\n    :param category_filter: whitelist of categories to limit return values\n    ",
        "idx": 169
    },
    {
        "id": 27151,
        "kind": "python Function",
        "name": "flask.helpers.send_file",
        "parameters": "filename_or_fp mimetype as_attachment attachment_filename add_etags cache_timeout conditional last_modified mtime fsize filename file headers filenames data rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 454,
        "end_line": 641,
        "comments": "Sends the contents of a file to the client.  This will use the\n    most efficient method available and configured.  By default it will\n    try to use the WSGI server's file_wrapper support.  Alternatively\n    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\n    to ``True`` to directly emit an ``X-Sendfile`` header.  This however\n    requires support of the underlying webserver for ``X-Sendfile``.\n\n    By default it will try to guess the mimetype for you, but you can\n    also explicitly provide one.  For extra security you probably want\n    to send certain files as attachment (HTML for instance).  The mimetype\n    guessing requires a `filename` or an `attachment_filename` to be\n    provided.\n\n    ETags will also be attached automatically if a `filename` is provided. You\n    can turn this off by setting `add_etags=False`.\n\n    If `conditional=True` and `filename` is provided, this method will try to\n    upgrade the response stream to support range requests.  This will allow\n    the request to be answered with partial content response.\n\n    Please never pass filenames to this function from user sources;\n    you should use :func:`send_from_directory` instead.\n\n    .. versionadded:: 0.2\n\n    .. versionadded:: 0.5\n       The `add_etags`, `cache_timeout` and `conditional` parameters were\n       added.  The default behavior is now to attach etags.\n\n    .. versionchanged:: 0.7\n       mimetype guessing and etag support for file objects was\n       deprecated because it was unreliable.  Pass a filename if you are\n       able to, otherwise attach an etag yourself.  This functionality\n       will be removed in Flask 1.0\n\n    .. versionchanged:: 0.9\n       cache_timeout pulls its default from application config, when None.\n\n    .. versionchanged:: 0.12\n       The filename is no longer automatically inferred from file objects. If\n       you want to use automatic mimetype and etag support, pass a filepath via\n       `filename_or_fp` or `attachment_filename`.\n\n    .. versionchanged:: 0.12\n       The `attachment_filename` is preferred over `filename` for MIME-type\n       detection.\n\n    .. versionchanged:: 1.0\n        UTF-8 filenames, as specified in `RFC 2231`_, are supported.\n\n    .. _RFC 2231: https://tools.ietf.org/html/rfc2231#section-4\n\n    .. versionchanged:: 1.0.3\n        Filenames are encoded with ASCII instead of Latin-1 for broader\n        compatibility with WSGI servers.\n\n    :param filename_or_fp: the filename of the file to send.\n                           This is relative to the :attr:`~Flask.root_path`\n                           if a relative path is specified.\n                           Alternatively a file object might be provided in\n                           which case ``X-Sendfile`` might not work and fall\n                           back to the traditional method.  Make sure that the\n                           file pointer is positioned at the start of data to\n                           send before calling :func:`send_file`.\n    :param mimetype: the mimetype of the file if provided. If a file path is\n                     given, auto detection happens as fallback, otherwise an\n                     error will be raised.\n    :param as_attachment: set to ``True`` if you want to send this file with\n                          a ``Content-Disposition: attachment`` header.\n    :param attachment_filename: the filename for the attachment if it\n                                differs from the file's filename.\n    :param add_etags: set to ``False`` to disable attaching of etags.\n    :param conditional: set to ``True`` to enable conditional responses.\n\n    :param cache_timeout: the timeout in seconds for the headers. When ``None``\n                          (default), this value is set by\n                          :meth:`~Flask.get_send_file_max_age` of\n                          :data:`~flask.current_app`.\n    :param last_modified: set the ``Last-Modified`` header to this value,\n        a :class:`~datetime.datetime` or timestamp.\n        If a file was passed, this overrides its mtime.\n    ",
        "idx": 170
    },
    {
        "id": 22423,
        "kind": "python Function",
        "name": "flask.helpers.safe_join",
        "parameters": "directory pathnames parts filename",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 644,
        "end_line": 678,
        "comments": "Safely join `directory` and zero or more untrusted `pathnames`\n    components.\n\n    Example usage::\n\n        @app.route('/wiki/<path:filename>')\n        def wiki_page(filename):\n            filename = safe_join(app.config['WIKI_FOLDER'], filename)\n            with open(filename, 'rb') as fd:\n                content = fd.read()  # Read and process the file content...\n\n    :param directory: the trusted base directory.\n    :param pathnames: the untrusted pathnames relative to that directory.\n    :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n            paths fall out of its boundaries.\n    ",
        "idx": 171
    },
    {
        "id": 27155,
        "kind": "python Function",
        "name": "flask.helpers.send_from_directory",
        "parameters": "directory filename options",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 681,
        "end_line": 717,
        "comments": "Send a file from a given directory with :func:`send_file`.  This\n    is a secure way to quickly expose static files from an upload folder\n    or something similar.\n\n    Example usage::\n\n        @app.route('/uploads/<path:filename>')\n        def download_file(filename):\n            return send_from_directory(app.config['UPLOAD_FOLDER'],\n                                       filename, as_attachment=True)\n\n    .. admonition:: Sending files and Performance\n\n       It is strongly recommended to activate either ``X-Sendfile`` support in\n       your webserver or (if no authentication happens) to tell the webserver\n       to serve files for the given path on its own without calling into the\n       web application for improved performance.\n\n    .. versionadded:: 0.5\n\n    :param directory: the directory where all the files are stored.\n    :param filename: the filename relative to that directory to\n                     download.\n    :param options: optional keyword arguments that are directly\n                    forwarded to :func:`send_file`.\n    ",
        "idx": 172
    },
    {
        "id": 14579,
        "kind": "python Function",
        "name": "flask.helpers.get_root_path",
        "parameters": "import_name mod loader filepath",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 720,
        "end_line": 763,
        "comments": "Returns the path to a package or cwd if that cannot be found.  This\n    returns the path of a package or the folder that contains a module.\n\n    Not to be confused with the package path returned by :func:`find_package`.\n    ",
        "idx": 173
    },
    {
        "id": 6407,
        "kind": "python Function",
        "name": "flask.helpers._matching_loader_thinks_module_is_package",
        "parameters": "loader mod_name",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 766,
        "end_line": 786,
        "comments": "Given the loader that loaded a module and the module this function\n    attempts to figure out if the given module is actually a package.\n    ",
        "idx": 174
    },
    {
        "id": 13498,
        "kind": "python Function",
        "name": "flask.helpers.find_package",
        "parameters": "import_name root_mod_name loader package_path filename site_parent site_folder py_prefix parent folder base_dir",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 789,
        "end_line": 841,
        "comments": "Finds a package and returns the prefix (or None if the package is\n    not installed) as well as the folder that contains the package or\n    module as a tuple.  The package path returned is the module that would\n    have to be added to the pythonpath in order to make it possible to\n    import the module.  The prefix is the path below which a UNIX like\n    folder structure exists (lib, share etc.).\n    ",
        "idx": 175
    },
    {
        "id": 29423,
        "kind": "python Function",
        "name": "flask.helpers.total_seconds",
        "parameters": "td",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 1010,
        "end_line": 1018,
        "comments": "Returns the total seconds from a timedelta object.\n\n    :param timedelta td: the timedelta to be converted in seconds\n\n    :returns: number of seconds\n    :rtype: int\n    ",
        "idx": 176
    },
    {
        "id": 16023,
        "kind": "python Function",
        "name": "flask.helpers.is_ip",
        "parameters": "value family",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 1021,
        "end_line": 1048,
        "comments": "Determine if the given string is an IP address.\n\n    Python 2 on Windows doesn't provide ``inet_pton``, so this only\n    checks IPv4 addresses in that environment.\n\n    :param value: value to check\n    :type value: str\n\n    :return: True if string is an IP address\n    :rtype: bool\n    ",
        "idx": 177
    },
    {
        "id": 16390,
        "kind": "python Function Attribute",
        "name": "flask.helpers._PackageBoundObject.jinja_loader",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 933,
        "end_line": 940,
        "comments": "The Jinja loader for this package bound object.\n\n        .. versionadded:: 0.5\n        ",
        "idx": 179
    },
    {
        "id": 14590,
        "kind": "python Function Attribute",
        "name": "flask.helpers._PackageBoundObject.get_send_file_max_age",
        "parameters": "self filename",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 942,
        "end_line": 966,
        "comments": "Provides default cache_timeout for the :func:`send_file` functions.\n\n        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\n        the configuration of :data:`~flask.current_app`.\n\n        Static file functions such as :func:`send_from_directory` use this\n        function, and :func:`send_file` calls this function on\n        :data:`~flask.current_app` when the given cache_timeout is ``None``. If a\n        cache_timeout is given in :func:`send_file`, that timeout is used;\n        otherwise, this method is called.\n\n        This allows subclasses to change the behavior when sending files based\n        on the filename.  For example, to set the cache timeout for .js files\n        to 60 seconds::\n\n            class MyFlask(flask.Flask):\n                def get_send_file_max_age(self, name):\n                    if name.lower().endswith('.js'):\n                        return 60\n                    return flask.Flask.get_send_file_max_age(self, name)\n\n        .. versionadded:: 0.9\n        ",
        "idx": 180
    },
    {
        "id": 27166,
        "kind": "python Function Attribute",
        "name": "flask.helpers._PackageBoundObject.send_static_file",
        "parameters": "self filename cache_timeout",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 968,
        "end_line": 980,
        "comments": "Function used internally to send static files from the static\n        folder to the browser.\n\n        .. versionadded:: 0.5\n        ",
        "idx": 181
    },
    {
        "id": 19436,
        "kind": "python Function Attribute",
        "name": "flask.helpers._PackageBoundObject.open_resource",
        "parameters": "self resource mode",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/helpers.py",
        "start_line": 982,
        "end_line": 1007,
        "comments": "Opens a resource from the application's resource folder.  To see\n        how this works, consider the following folder structure::\n\n            /myapplication.py\n            /schema.sql\n            /static\n                /style.css\n            /templates\n                /layout.html\n                /index.html\n\n        If you want to open the :file:`schema.sql` file you would do the\n        following::\n\n            with app.open_resource('schema.sql') as f:\n                contents = f.read()\n                do_something_with(contents)\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        ",
        "idx": 182
    },
    {
        "id": 4030,
        "kind": "python Function Attribute Special",
        "name": "flask.json.tag.TaggedJSONSerializer.__init__",
        "parameters": "self cls",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 239,
        "end_line": 244,
        "comments": "Create a tagger for the given serializer.",
        "idx": 183
    },
    {
        "id": 4031,
        "kind": "python Function Attribute Special",
        "name": "flask.json.tag.JSONTag.__init__",
        "parameters": "self serializer",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 65,
        "end_line": 67,
        "comments": "Create a tagger for the given serializer.",
        "idx": 183
    },
    {
        "id": 9595,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagUUID.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 191,
        "end_line": 192,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9596,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagTuple.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 133,
        "end_line": 134,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9597,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagMarkup.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 177,
        "end_line": 178,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9598,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDict.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 99,
        "end_line": 104,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9599,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDateTime.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 205,
        "end_line": 206,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9600,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagBytes.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 159,
        "end_line": 160,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9601,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.PassList.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 146,
        "end_line": 147,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9602,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.PassDict.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 118,
        "end_line": 119,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 9603,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.JSONTag.check",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 69,
        "end_line": 71,
        "comments": "Check if the given value should be tagged by this tag.",
        "idx": 184
    },
    {
        "id": 29332,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagUUID.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 194,
        "end_line": 195,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29333,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagTuple.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 136,
        "end_line": 137,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29334,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagMarkup.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 180,
        "end_line": 181,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29335,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDict.to_json",
        "parameters": "self value key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 106,
        "end_line": 108,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29336,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDateTime.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 208,
        "end_line": 209,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29337,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagBytes.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 162,
        "end_line": 163,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29338,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.PassList.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 149,
        "end_line": 150,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29339,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.PassDict.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 121,
        "end_line": 124,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29340,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.JSONTag.to_json",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 73,
        "end_line": 76,
        "comments": "Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.",
        "idx": 185
    },
    {
        "id": 29346,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagUUID.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 197,
        "end_line": 198,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29347,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagTuple.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 139,
        "end_line": 140,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29348,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagMarkup.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 183,
        "end_line": 184,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29349,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDict.to_python",
        "parameters": "self value key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 110,
        "end_line": 112,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29350,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagDateTime.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 211,
        "end_line": 212,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29351,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TagBytes.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 165,
        "end_line": 166,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 29352,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.JSONTag.to_python",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 78,
        "end_line": 81,
        "comments": "Convert the JSON representation back to the correct type. The tag\n        will already be removed.",
        "idx": 186
    },
    {
        "id": 28454,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.tag",
        "parameters": "self value tag",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 274,
        "end_line": 280,
        "comments": "Convert a value to a tagged representation if necessary.",
        "idx": 189
    },
    {
        "id": 28457,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.JSONTag.tag",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 83,
        "end_line": 86,
        "comments": "Convert a value to a tagged representation if necessary.",
        "idx": 189
    },
    {
        "id": 21330,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.register",
        "parameters": "self tag_class force index tag key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 246,
        "end_line": 272,
        "comments": "Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        ",
        "idx": 188
    },
    {
        "id": 28454,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.tag",
        "parameters": "self value tag",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 274,
        "end_line": 280,
        "comments": "Convert a value to a tagged representation if necessary.",
        "idx": 189
    },
    {
        "id": 28457,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.JSONTag.tag",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 83,
        "end_line": 86,
        "comments": "Convert a value to a tagged representation if necessary.",
        "idx": 189
    },
    {
        "id": 29677,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.untag",
        "parameters": "self value key",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 282,
        "end_line": 292,
        "comments": "Convert a tagged representation back to the original type.",
        "idx": 190
    },
    {
        "id": 11898,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.dumps",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 294,
        "end_line": 296,
        "comments": "Tag the value and dump it to a compact JSON string.",
        "idx": 191
    },
    {
        "id": 17365,
        "kind": "python Function Attribute",
        "name": "flask.json.tag.TaggedJSONSerializer.loads",
        "parameters": "self value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/tag.py",
        "start_line": 298,
        "end_line": 300,
        "comments": "Load data from a JSON string and deserialized any tagged objects.",
        "idx": 192
    },
    {
        "id": 5726,
        "kind": "python Function",
        "name": "flask.json._dump_arg_defaults",
        "parameters": "kwargs bp",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 92,
        "end_line": 108,
        "comments": "Inject default arguments for dump functions.",
        "idx": 193
    },
    {
        "id": 6320,
        "kind": "python Function",
        "name": "flask.json._load_arg_defaults",
        "parameters": "kwargs bp",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 111,
        "end_line": 121,
        "comments": "Inject default arguments for load functions.",
        "idx": 194
    },
    {
        "id": 11496,
        "kind": "python Function",
        "name": "flask.json.detect_encoding",
        "parameters": "data head",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 124,
        "end_line": 164,
        "comments": "Detect which UTF codec was used to encode the given bytes.\n\n    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n    or little endian. Some editors or libraries may prepend a BOM.\n\n    :param data: Bytes in unknown UTF encoding.\n    :return: UTF encoding name\n    ",
        "idx": 195
    },
    {
        "id": 11894,
        "kind": "python Function",
        "name": "flask.json.dumps",
        "parameters": "obj kwargs encoding rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 167,
        "end_line": 182,
        "comments": "Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n    configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n    application on the stack.\n\n    This function can return ``unicode`` strings or ascii-only bytestrings by\n    default which coerce into unicode strings automatically.  That behavior by\n    default is controlled by the ``JSON_AS_ASCII`` configuration variable\n    and can be overridden by the simplejson ``ensure_ascii`` parameter.\n    ",
        "idx": 196
    },
    {
        "id": 11878,
        "kind": "python Function",
        "name": "flask.json.dump",
        "parameters": "obj fp kwargs encoding",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 185,
        "end_line": 191,
        "comments": "Like :func:`dumps` but writes into a file object.",
        "idx": 197
    },
    {
        "id": 17361,
        "kind": "python Function",
        "name": "flask.json.loads",
        "parameters": "s kwargs encoding",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 194,
        "end_line": 205,
        "comments": "Unserialize a JSON object from a string ``s`` by using the application's\n    configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an\n    application on the stack.\n    ",
        "idx": 198
    },
    {
        "id": 17289,
        "kind": "python Function",
        "name": "flask.json.load",
        "parameters": "fp kwargs",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 208,
        "end_line": 214,
        "comments": "Like :func:`loads` but reads from a file object.\n    ",
        "idx": 199
    },
    {
        "id": 15328,
        "kind": "python Function",
        "name": "flask.json.htmlsafe_dumps",
        "parameters": "obj kwargs rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 217,
        "end_line": 249,
        "comments": "Works exactly like :func:`dumps` but is safe for use in ``<script>``\n    tags.  It accepts the same arguments and returns a JSON string.  Note that\n    this is available in templates through the ``|tojson`` filter which will\n    also mark the result as safe.  Due to how this function escapes certain\n    characters this is safe even if used outside of ``<script>`` tags.\n\n    The following characters are escaped in strings:\n\n    -   ``<``\n    -   ``>``\n    -   ``&``\n    -   ``'``\n\n    This makes it safe to embed such strings in any place in HTML with the\n    notable exception of double quoted attributes.  In that case single\n    quote your attributes or HTML escape it in addition.\n\n    .. versionchanged:: 0.10\n       This function's return value is now always safe for HTML usage, even\n       if outside of script tags or if used in XHTML.  This rule does not\n       hold true when using this function in HTML attributes that are double\n       quoted.  Always single quote attributes if you use the ``|tojson``\n       filter.  Alternatively use ``|tojson|forceescape``.\n    ",
        "idx": 200
    },
    {
        "id": 15327,
        "kind": "python Function",
        "name": "flask.json.htmlsafe_dump",
        "parameters": "obj fp kwargs",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 252,
        "end_line": 254,
        "comments": "Like :func:`htmlsafe_dumps` but writes into a file object.",
        "idx": 201
    },
    {
        "id": 16423,
        "kind": "python Function",
        "name": "flask.json.jsonify",
        "parameters": "args kwargs indent separators data",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 257,
        "end_line": 323,
        "comments": "This function wraps :func:`dumps` to add a few enhancements that make\n    life easier.  It turns the JSON output into a :class:`~flask.Response`\n    object with the :mimetype:`application/json` mimetype.  For convenience, it\n    also converts multiple arguments into an array or multiple keyword arguments\n    into a dict.  This means that both ``jsonify(1,2,3)`` and\n    ``jsonify([1,2,3])`` serialize to ``[1,2,3]``.\n\n    For clarity, the JSON serialization behavior has the following differences\n    from :func:`dumps`:\n\n    1. Single argument: Passed straight through to :func:`dumps`.\n    2. Multiple arguments: Converted to an array before being passed to\n       :func:`dumps`.\n    3. Multiple keyword arguments: Converted to a dict before being passed to\n       :func:`dumps`.\n    4. Both args and kwargs: Behavior undefined and will throw an exception.\n\n    Example usage::\n\n        from flask import jsonify\n\n        @app.route('/_get_current_user')\n        def get_current_user():\n            return jsonify(username=g.user.username,\n                           email=g.user.email,\n                           id=g.user.id)\n\n    This will send a JSON response like this to the browser::\n\n        {\n            \"username\": \"admin\",\n            \"email\": \"admin@localhost\",\n            \"id\": 42\n        }\n\n\n    .. versionchanged:: 0.11\n       Added support for serializing top-level arrays. This introduces a\n       security risk in ancient browsers. See :ref:`json-security` for details.\n\n    This function's response will be pretty printed if the\n    ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the\n    Flask app is running in debug mode. Compressed (not pretty) formatting\n    currently means no indents and no spaces after separators.\n\n    .. versionadded:: 0.2\n    ",
        "idx": 202
    },
    {
        "id": 11317,
        "kind": "python Function Attribute",
        "name": "flask.json.JSONEncoder.default",
        "parameters": "self o",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/json/__init__.py",
        "start_line": 56,
        "end_line": 81,
        "comments": "Implement this method in a subclass such that it returns a\n        serializable object for ``o``, or calls the base implementation (to\n        raise a :exc:`TypeError`).\n\n        For example, to support arbitrary iterators, you could implement\n        default like this::\n\n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                return JSONEncoder.default(self, o)\n        ",
        "idx": 203
    },
    {
        "id": 30849,
        "kind": "python Function",
        "name": "flask.logging.wsgi_errors_stream",
        "parameters": "",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/logging.py",
        "start_line": 21,
        "end_line": 30,
        "comments": "Find the most appropriate error stream for the application. If a request\n    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\n    If you configure your own :class:`logging.StreamHandler`, you may want to\n    use this for the stream. If you are using file or dict configuration and\n    can't import this directly, you can refer to it as\n    ``ext://flask.logging.wsgi_errors_stream``.\n    ",
        "idx": 204
    },
    {
        "id": 14991,
        "kind": "python Function",
        "name": "flask.logging.has_level_handler",
        "parameters": "logger level current",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/logging.py",
        "start_line": 33,
        "end_line": 49,
        "comments": "Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    ",
        "idx": 205
    },
    {
        "id": 10825,
        "kind": "python Function",
        "name": "flask.logging.create_logger",
        "parameters": "app logger",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/logging.py",
        "start_line": 60,
        "end_line": 78,
        "comments": "Get the ``'flask.app'`` logger and configure it if needed.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    ",
        "idx": 206
    },
    {
        "id": 17608,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.make_null_session",
        "parameters": "self app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 152,
        "end_line": 162,
        "comments": "Creates a null session which acts as a replacement object if the\n        real session support could not be loaded due to a configuration\n        error.  This mainly aids the user experience because the job of the\n        null session is to still support lookup without complaining but\n        modifications are answered with a helpful error message of what\n        failed.\n\n        This creates an instance of :attr:`null_session_class` by default.\n        ",
        "idx": 208
    },
    {
        "id": 16054,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.is_null_session",
        "parameters": "self obj",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 164,
        "end_line": 171,
        "comments": "Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        ",
        "idx": 209
    },
    {
        "id": 14409,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_cookie_domain",
        "parameters": "self app rv ip",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 173,
        "end_line": 229,
        "comments": "Returns the domain that should be set for the session cookie.\n\n        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise\n        falls back to detecting the domain based on ``SERVER_NAME``.\n\n        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is\n        updated to avoid re-running the logic.\n        ",
        "idx": 210
    },
    {
        "id": 14413,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_cookie_path",
        "parameters": "self app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 231,
        "end_line": 238,
        "comments": "Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        ",
        "idx": 211
    },
    {
        "id": 14411,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_cookie_httponly",
        "parameters": "self app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 240,
        "end_line": 245,
        "comments": "Returns True if the session cookie should be httponly.  This\n        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n        config var.\n        ",
        "idx": 212
    },
    {
        "id": 14417,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_cookie_secure",
        "parameters": "self app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 247,
        "end_line": 251,
        "comments": "Returns True if the cookie should be secure.  This currently\n        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n        ",
        "idx": 213
    },
    {
        "id": 14415,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_cookie_samesite",
        "parameters": "self app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 253,
        "end_line": 258,
        "comments": "Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n        ``SameSite`` attribute. This currently just returns the value of\n        the :data:`SESSION_COOKIE_SAMESITE` setting.\n        ",
        "idx": 214
    },
    {
        "id": 14460,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.get_expiration_time",
        "parameters": "self app session",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 260,
        "end_line": 267,
        "comments": "A helper method that returns an expiration date for the session\n        or ``None`` if the session is linked to the browser session.  The\n        default implementation returns now + the permanent session\n        lifetime configured on the application.\n        ",
        "idx": 215
    },
    {
        "id": 27521,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.should_set_cookie",
        "parameters": "self app session",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 269,
        "end_line": 283,
        "comments": "Used by session backends to determine if a ``Set-Cookie`` header\n        should be set for this session cookie for this response. If the session\n        has been modified, the cookie is set. If the session is permanent and\n        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n        always set.\n\n        This check is usually skipped if the session was deleted.\n\n        .. versionadded:: 0.11\n        ",
        "idx": 216
    },
    {
        "id": 19438,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.open_session",
        "parameters": "self app request",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 285,
        "end_line": 291,
        "comments": "This method has to be implemented and must either return ``None``\n        in case the loading failed because of a configuration error or an\n        instance of a session object which implements a dictionary like\n        interface + the methods and attributes on :class:`SessionMixin`.\n        ",
        "idx": 217
    },
    {
        "id": 19439,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SecureCookieSessionInterface.open_session",
        "parameters": "self app request s val max_age data",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 334,
        "end_line": 346,
        "comments": "This method has to be implemented and must either return ``None``\n        in case the loading failed because of a configuration error or an\n        instance of a session object which implements a dictionary like\n        interface + the methods and attributes on :class:`SessionMixin`.\n        ",
        "idx": 217
    },
    {
        "id": 22458,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SessionInterface.save_session",
        "parameters": "self app session response",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 293,
        "end_line": 299,
        "comments": "This is called for actual sessions returned by :meth:`open_session`\n        at the end of the request.  This is still called during a request\n        context so if you absolutely need access to the request you can do\n        that.\n        ",
        "idx": 218
    },
    {
        "id": 22459,
        "kind": "python Function Attribute",
        "name": "flask.sessions.SecureCookieSessionInterface.save_session",
        "parameters": "self app session response domain path httponly secure samesite expires val",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/sessions.py",
        "start_line": 348,
        "end_line": 385,
        "comments": "This is called for actual sessions returned by :meth:`open_session`\n        at the end of the request.  This is still called during a request\n        context so if you absolutely need access to the request you can do\n        that.\n        ",
        "idx": 218
    },
    {
        "id": 5697,
        "kind": "python Function",
        "name": "flask.templating._default_template_ctx_processor",
        "parameters": "reqctx appctx rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py",
        "start_line": 19,
        "end_line": 31,
        "comments": "Default template context processor.  Injects `request`,\n    `session` and `g`.\n    ",
        "idx": 219
    },
    {
        "id": 6735,
        "kind": "python Function",
        "name": "flask.templating._render",
        "parameters": "template context app rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py",
        "start_line": 113,
        "end_line": 119,
        "comments": "Renders the template and fires the signal",
        "idx": 220
    },
    {
        "id": 21436,
        "kind": "python Function",
        "name": "flask.templating.render_template",
        "parameters": "template_name_or_list context ctx",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py",
        "start_line": 122,
        "end_line": 135,
        "comments": "Renders a template from the template folder with the given\n    context.\n\n    :param template_name_or_list: the name of the template to be\n                                  rendered, or an iterable with template names\n                                  the first one existing will be rendered\n    :param context: the variables that should be available in the\n                    context of the template.\n    ",
        "idx": 221
    },
    {
        "id": 21438,
        "kind": "python Function",
        "name": "flask.templating.render_template_string",
        "parameters": "source context ctx",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/templating.py",
        "start_line": 138,
        "end_line": 150,
        "comments": "Renders a template from the given template source string\n    with the given context. Template variables will be autoescaped.\n\n    :param source: the source code of the template to be\n                   rendered\n    :param context: the variables that should be available in the\n                    context of the template.\n    ",
        "idx": 222
    },
    {
        "id": 17625,
        "kind": "python Function",
        "name": "flask.testing.make_test_environ_builder",
        "parameters": "app path base_url subdomain url_scheme args kwargs http_host app_root url sep",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/testing.py",
        "start_line": 24,
        "end_line": 88,
        "comments": "Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n    defaults from the application.\n\n    :param app: The Flask application to configure the environment from.\n    :param path: URL path being requested.\n    :param base_url: Base URL where the app is being served, which\n        ``path`` is relative to. If not given, built from\n        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n    :param url_scheme: Scheme to use instead of\n        :data:`PREFERRED_URL_SCHEME`.\n    :param json: If given, this is serialized as JSON and passed as\n        ``data``. Also defaults ``content_type`` to\n        ``application/json``.\n    :param args: other positional arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    :param kwargs: other keyword arguments passed to\n        :class:`~werkzeug.test.EnvironBuilder`.\n    ",
        "idx": 223
    },
    {
        "id": 27304,
        "kind": "python Function Attribute",
        "name": "flask.testing.FlaskClient.session_transaction",
        "parameters": "self args kwargs app environ_overrides outer_reqctx c session_interface sess resp headers",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/testing.py",
        "start_line": 116,
        "end_line": 164,
        "comments": "When used in combination with a ``with`` statement this opens a\n        session transaction.  This can be used to modify the session that\n        the test client uses.  Once the ``with`` block is left the session is\n        stored back.\n\n        ::\n\n            with client.session_transaction() as session:\n                session['value'] = 42\n\n        Internally this is implemented by going through a temporary test\n        request context and since session handling could depend on\n        request variables this function accepts the same arguments as\n        :meth:`~flask.Flask.test_request_context` which are directly\n        passed through.\n        ",
        "idx": 224
    },
    {
        "id": 15936,
        "kind": "python Function Attribute",
        "name": "flask.testing.FlaskCliRunner.invoke",
        "parameters": "self cli args kwargs",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/testing.py",
        "start_line": 229,
        "end_line": 250,
        "comments": "Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :param cli: Command object to invoke. Default is the app's\n            :attr:`~flask.app.Flask.cli` group.\n        :param args: List of strings to invoke the command with.\n\n        :return: a :class:`~click.testing.Result` object.\n        ",
        "idx": 225
    },
    {
        "id": 11624,
        "kind": "python Function Attribute",
        "name": "flask.views.View.dispatch_request",
        "parameters": "self",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/views.py",
        "start_line": 69,
        "end_line": 74,
        "comments": "Subclasses have to override this method to implement the\n        actual view function code.  This method is called with all\n        the arguments from the URL rule.\n        ",
        "idx": 226
    },
    {
        "id": 11625,
        "kind": "python Function Attribute",
        "name": "flask.views.MethodView.dispatch_request",
        "parameters": "self args kwargs meth",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/views.py",
        "start_line": 149,
        "end_line": 158,
        "comments": "Subclasses have to override this method to implement the\n        actual view function code.  This method is called with all\n        the arguments from the URL rule.\n        ",
        "idx": 226
    },
    {
        "id": 8582,
        "kind": "python Function Attribute",
        "name": "flask.views.View.as_view",
        "parameters": "cls name class_args class_kwargs view decorator",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/views.py",
        "start_line": 77,
        "end_line": 107,
        "comments": "Converts the class into an actual view function that can be used\n        with the routing system.  Internally this generates a function on the\n        fly which will instantiate the :class:`View` on each request and call\n        the :meth:`dispatch_request` method on it.\n\n        The arguments passed to :meth:`as_view` are forwarded to the\n        constructor of the class.\n        ",
        "idx": 227
    },
    {
        "id": 14500,
        "kind": "python Function Attribute",
        "name": "flask.wrappers.JSONMixin.get_json",
        "parameters": "self force silent cache data rv e normal_rv _ silent_rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/wrappers.py",
        "start_line": 52,
        "end_line": 90,
        "comments": "Parse and return the data as JSON. If the mimetype does not\n        indicate JSON (:mimetype:`application/json`, see\n        :meth:`is_json`), this returns ``None`` unless ``force`` is\n        true. If parsing fails, :meth:`on_json_loading_failed` is called\n        and its return value is used as the return value.\n\n        :param force: Ignore the mimetype and always try to parse JSON.\n        :param silent: Silence parsing errors and return ``None``\n            instead.\n        :param cache: Store the parsed JSON to return for subsequent\n            calls.\n        ",
        "idx": 230
    },
    {
        "id": 19365,
        "kind": "python Function Attribute",
        "name": "flask.wrappers.JSONMixin.on_json_loading_failed",
        "parameters": "self e",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/wrappers.py",
        "start_line": 92,
        "end_line": 108,
        "comments": "Called if :meth:`get_json` parsing fails and isn't silenced. If\n        this method returns a value, it is used as the return value for\n        :meth:`get_json`. The default implementation raises a\n        :class:`BadRequest` exception.\n\n        .. versionchanged:: 0.10\n           Raise a :exc:`BadRequest` error instead of returning an error\n           message as JSON. If you want that behavior you can add it by\n           subclassing.\n\n        .. versionadded:: 0.8\n        ",
        "idx": 231
    },
    {
        "id": 30716,
        "kind": "python Function",
        "name": "flask._compat.with_metaclass",
        "parameters": "meta bases metaclass",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/flask/_compat.py",
        "start_line": 59,
        "end_line": 67,
        "comments": "Create a base class with a metaclass.",
        "idx": 236
    },
    {
        "id": 6925,
        "kind": "python Function",
        "name": "conftest._standard_os_environ",
        "parameters": "mp out _ key value",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 24,
        "end_line": 45,
        "comments": "Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    ",
        "idx": 237
    },
    {
        "id": 6758,
        "kind": "python Function",
        "name": "conftest._reset_os_environ",
        "parameters": "monkeypatch _standard_os_environ",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 49,
        "end_line": 53,
        "comments": "Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    ",
        "idx": 238
    },
    {
        "id": 17127,
        "kind": "python Function",
        "name": "conftest.limit_loader",
        "parameters": "request monkeypatch LimitedLoader get_loader old_get_loader",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 105,
        "end_line": 133,
        "comments": "Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n    This provides for tests where a system has custom loaders, e.g. Google App\n    Engine's HardenedModulesHook, which have neither the `get_filename` method\n    nor the `archive` attribute.\n\n    This fixture will run the testcase twice, once with and once without the\n    limitation/mock.\n    ",
        "idx": 239
    },
    {
        "id": 18192,
        "kind": "python Function",
        "name": "conftest.modules_tmpdir",
        "parameters": "tmpdir monkeypatch rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 137,
        "end_line": 141,
        "comments": "A tmpdir added to sys.path.",
        "idx": 240
    },
    {
        "id": 27595,
        "kind": "python Function",
        "name": "conftest.site_packages",
        "parameters": "modules_tmpdir monkeypatch rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 151,
        "end_line": 158,
        "comments": "Create a fake site-packages.",
        "idx": 241
    },
    {
        "id": 15876,
        "kind": "python Function",
        "name": "conftest.install_egg",
        "parameters": "modules_tmpdir monkeypatch inner",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/conftest.py",
        "start_line": 162,
        "end_line": 190,
        "comments": "Generate egg from package name inside base and put the egg into\n    sys.path.",
        "idx": 242
    },
    {
        "id": 28777,
        "kind": "python Function",
        "name": "test_cli.test_cli_name",
        "parameters": "test_apps",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 44,
        "end_line": 47,
        "comments": "Make sure the CLI object's name is the app's name and not the app itself",
        "idx": 243
    },
    {
        "id": 28861,
        "kind": "python Function",
        "name": "test_cli.test_find_best_app",
        "parameters": "test_apps Module Module Module Module Module Module Module Module Module Module Module Module Module script_info",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 50,
        "end_line": 142,
        "comments": "Test if `find_best_app` behaves as expected with different combinations of input.",
        "idx": 244
    },
    {
        "id": 28954,
        "kind": "python Function",
        "name": "test_cli.test_prepare_import",
        "parameters": "request value path result reset_path original_path",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 169,
        "end_line": 185,
        "comments": "Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    ",
        "idx": 245
    },
    {
        "id": 28876,
        "kind": "python Function",
        "name": "test_cli.test_get_version",
        "parameters": "test_apps capsys MockCtx py_ver ctx out err",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 243,
        "end_line": 258,
        "comments": "Test of get_version.",
        "idx": 246
    },
    {
        "id": 28992,
        "kind": "python Function",
        "name": "test_cli.test_scriptinfo",
        "parameters": "test_apps monkeypatch create_app obj app",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 261,
        "end_line": 292,
        "comments": "Test of ScriptInfo.",
        "idx": 247
    },
    {
        "id": 29105,
        "kind": "python Function",
        "name": "test_cli.test_with_appcontext",
        "parameters": "runner testcmd obj result info",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 295,
        "end_line": 307,
        "comments": "Test of with_appcontext.",
        "idx": 248
    },
    {
        "id": 28735,
        "kind": "python Function",
        "name": "test_cli.test_appgroup",
        "parameters": "runner cli test subgroup test2 obj result info",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 310,
        "end_line": 337,
        "comments": "Test of with_appcontext.",
        "idx": 249
    },
    {
        "id": 28865,
        "kind": "python Function",
        "name": "test_cli.test_flaskgroup",
        "parameters": "runner create_app cli test result",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 340,
        "end_line": 356,
        "comments": "Test FlaskGroup.",
        "idx": 250
    },
    {
        "id": 28866,
        "kind": "python Function",
        "name": "test_cli.test_flaskgroup_debug",
        "parameters": "runner set_debug_flag create_app cli test result",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 360,
        "end_line": 378,
        "comments": "Test FlaskGroup debug flag behavior.",
        "idx": 251
    },
    {
        "id": 28957,
        "kind": "python Function",
        "name": "test_cli.test_print_exceptions",
        "parameters": "runner create_app cli result",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_cli.py",
        "start_line": 381,
        "end_line": 395,
        "comments": "Print the stacktrace if the CLI.",
        "idx": 252
    },
    {
        "id": 28905,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_basic_types",
        "parameters": "self test_value app client url rv x",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 159,
        "end_line": 166,
        "comments": "Test jsonify with basic types.",
        "idx": 253
    },
    {
        "id": 28907,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_dicts",
        "parameters": "self app client return_kwargs return_dict d url rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 168,
        "end_line": 186,
        "comments": "Test jsonify with dicts and kwargs unpacking.",
        "idx": 254
    },
    {
        "id": 28903,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_arrays",
        "parameters": "self app client return_args_unpack return_array l url rv",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 188,
        "end_line": 207,
        "comments": "Test jsonify of lists and args unpacking.",
        "idx": 255
    },
    {
        "id": 28906,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_date_types",
        "parameters": "self app client test_dates i d url rv val",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 209,
        "end_line": 221,
        "comments": "Test jsonify with datetime.date and datetime.datetime types.",
        "idx": 256
    },
    {
        "id": 28904,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_aware_datetimes",
        "parameters": "self tz tzinfo dt gmt expected",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 224,
        "end_line": 230,
        "comments": "Test if aware datetime.datetime objects are converted into GMT.",
        "idx": 257
    },
    {
        "id": 28911,
        "kind": "python Function Attribute",
        "name": "test_helpers.TestJSON.test_jsonify_uuid_types",
        "parameters": "self app client test_uuid url rv rv_x rv_uuid",
        "file": "C:/Users/njdx/Desktop/\u942e\u65be\u7af4/\u7ec9\u6220\u723a/\u6d60\uff47\u721c\u5a09\u3129\u5674/dataset/flask/tests/test_helpers.py",
        "start_line": 232,
        "end_line": 244,
        "comments": "Test jsonify with uuid.UUID types",
        "idx": 258
    }
]